
lora_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08002d48  08002d48  00012d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e6c  08002e6c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002e6c  08002e6c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e6c  08002e6c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e6c  08002e6c  00012e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e70  08002e70  00012e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  08002ee4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08002ee4  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000061d9  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001501  00000000  00000000  00026272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  00027778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e8  00000000  00000000  00027e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017556  00000000  00000000  00028400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007b08  00000000  00000000  0003f956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000821d2  00000000  00000000  0004745e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c9630  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cd8  00000000  00000000  000c9680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d30 	.word	0x08002d30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002d30 	.word	0x08002d30

0800014c <HAL_GPIO_EXTI_Callback>:


////Handle recieve data;
void handle_rx_data(uint8_t* receive_data, uint8_t count);
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if(GPIO_Pin == DIO0_Pin){
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	2b04      	cmp	r3, #4
 800015a:	d103      	bne.n	8000164 <HAL_GPIO_EXTI_Callback+0x18>
	  /// Check RxDone
	  if((LoRa_read(&my_lora, RegIrqFlags)&0x40)!= 0){
 800015c:	2112      	movs	r1, #18
 800015e:	4803      	ldr	r0, [pc, #12]	; (800016c <HAL_GPIO_EXTI_Callback+0x20>)
 8000160:	f002 f9cd 	bl	80024fe <LoRa_read>


	  }

  }
}
 8000164:	bf00      	nop
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200000e4 	.word	0x200000e4

08000170 <handle_rx_data>:

void handle_rx_data(uint8_t* receive_data, uint8_t count){
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	460b      	mov	r3, r1
 800017a:	70fb      	strb	r3, [r7, #3]

	if(!count)
 800017c:	78fb      	ldrb	r3, [r7, #3]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d077      	beq.n	8000272 <handle_rx_data+0x102>
		return;

	rx_buff = (uint8_t*)malloc(sizeof(uint8_t));
 8000182:	2001      	movs	r0, #1
 8000184:	f002 fbda 	bl	800293c <malloc>
 8000188:	4603      	mov	r3, r0
 800018a:	461a      	mov	r2, r3
 800018c:	4b3b      	ldr	r3, [pc, #236]	; (800027c <handle_rx_data+0x10c>)
 800018e:	601a      	str	r2, [r3, #0]
	for(int i =0 ; i< count; i++){
 8000190:	2300      	movs	r3, #0
 8000192:	60fb      	str	r3, [r7, #12]
 8000194:	e065      	b.n	8000262 <handle_rx_data+0xf2>

		switch(receive_data[i]){
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	687a      	ldr	r2, [r7, #4]
 800019a:	4413      	add	r3, r2
 800019c:	781b      	ldrb	r3, [r3, #0]
 800019e:	2b39      	cmp	r3, #57	; 0x39
 80001a0:	dc16      	bgt.n	80001d0 <handle_rx_data+0x60>
 80001a2:	2b30      	cmp	r3, #48	; 0x30
 80001a4:	da33      	bge.n	800020e <handle_rx_data+0x9e>
 80001a6:	e059      	b.n	800025c <handle_rx_data+0xec>
 80001a8:	3b70      	subs	r3, #112	; 0x70
 80001aa:	2b06      	cmp	r3, #6
 80001ac:	d856      	bhi.n	800025c <handle_rx_data+0xec>
 80001ae:	a201      	add	r2, pc, #4	; (adr r2, 80001b4 <handle_rx_data+0x44>)
 80001b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001b4:	080001f5 	.word	0x080001f5
 80001b8:	0800025d 	.word	0x0800025d
 80001bc:	0800025d 	.word	0x0800025d
 80001c0:	0800025d 	.word	0x0800025d
 80001c4:	0800025d 	.word	0x0800025d
 80001c8:	0800025d 	.word	0x0800025d
 80001cc:	080001db 	.word	0x080001db
 80001d0:	2b76      	cmp	r3, #118	; 0x76
 80001d2:	dc43      	bgt.n	800025c <handle_rx_data+0xec>
 80001d4:	2b70      	cmp	r3, #112	; 0x70
 80001d6:	dae7      	bge.n	80001a8 <handle_rx_data+0x38>
 80001d8:	e040      	b.n	800025c <handle_rx_data+0xec>
			////
			break;

		case 'v':
			////
			vel = atoi((const char*)rx_buff);
 80001da:	4b28      	ldr	r3, [pc, #160]	; (800027c <handle_rx_data+0x10c>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4618      	mov	r0, r3
 80001e0:	f002 fb75 	bl	80028ce <atoi>
 80001e4:	4603      	mov	r3, r0
 80001e6:	b21a      	sxth	r2, r3
 80001e8:	4b25      	ldr	r3, [pc, #148]	; (8000280 <handle_rx_data+0x110>)
 80001ea:	801a      	strh	r2, [r3, #0]
			//memset(rx_buff,0,sizeof(rx_buff));
			rx_index = 0;
 80001ec:	4b25      	ldr	r3, [pc, #148]	; (8000284 <handle_rx_data+0x114>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	701a      	strb	r2, [r3, #0]
			//free(receive_data);
			break;
 80001f2:	e033      	b.n	800025c <handle_rx_data+0xec>

		case 'p':
			pos = atoi((const char*)rx_buff);
 80001f4:	4b21      	ldr	r3, [pc, #132]	; (800027c <handle_rx_data+0x10c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4618      	mov	r0, r3
 80001fa:	f002 fb68 	bl	80028ce <atoi>
 80001fe:	4603      	mov	r3, r0
 8000200:	b21a      	sxth	r2, r3
 8000202:	4b21      	ldr	r3, [pc, #132]	; (8000288 <handle_rx_data+0x118>)
 8000204:	801a      	strh	r2, [r3, #0]
			//memset(rx_buff,0,sizeof(rx_buff));
			rx_index =0;
 8000206:	4b1f      	ldr	r3, [pc, #124]	; (8000284 <handle_rx_data+0x114>)
 8000208:	2200      	movs	r2, #0
 800020a:	701a      	strb	r2, [r3, #0]

			break;
 800020c:	e026      	b.n	800025c <handle_rx_data+0xec>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			rx_buff = (uint8_t*)realloc(rx_buff,(++rx_index)*sizeof(uint8_t));
 800020e:	4b1b      	ldr	r3, [pc, #108]	; (800027c <handle_rx_data+0x10c>)
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	4b1c      	ldr	r3, [pc, #112]	; (8000284 <handle_rx_data+0x114>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	3301      	adds	r3, #1
 8000218:	b2d9      	uxtb	r1, r3
 800021a:	4b1a      	ldr	r3, [pc, #104]	; (8000284 <handle_rx_data+0x114>)
 800021c:	7019      	strb	r1, [r3, #0]
 800021e:	4b19      	ldr	r3, [pc, #100]	; (8000284 <handle_rx_data+0x114>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	4619      	mov	r1, r3
 8000224:	4610      	mov	r0, r2
 8000226:	f002 fc91 	bl	8002b4c <realloc>
 800022a:	4603      	mov	r3, r0
 800022c:	4a13      	ldr	r2, [pc, #76]	; (800027c <handle_rx_data+0x10c>)
 800022e:	6013      	str	r3, [r2, #0]
			rx_buff[rx_index++] |= receive_data[i];
 8000230:	4b12      	ldr	r3, [pc, #72]	; (800027c <handle_rx_data+0x10c>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b13      	ldr	r3, [pc, #76]	; (8000284 <handle_rx_data+0x114>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	1c59      	adds	r1, r3, #1
 800023a:	b2c8      	uxtb	r0, r1
 800023c:	4911      	ldr	r1, [pc, #68]	; (8000284 <handle_rx_data+0x114>)
 800023e:	7008      	strb	r0, [r1, #0]
 8000240:	4619      	mov	r1, r3
 8000242:	440a      	add	r2, r1
 8000244:	7811      	ldrb	r1, [r2, #0]
 8000246:	68fa      	ldr	r2, [r7, #12]
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	4402      	add	r2, r0
 800024c:	7812      	ldrb	r2, [r2, #0]
 800024e:	480b      	ldr	r0, [pc, #44]	; (800027c <handle_rx_data+0x10c>)
 8000250:	6800      	ldr	r0, [r0, #0]
 8000252:	4403      	add	r3, r0
 8000254:	430a      	orrs	r2, r1
 8000256:	b2d2      	uxtb	r2, r2
 8000258:	701a      	strb	r2, [r3, #0]
			break;
 800025a:	bf00      	nop
	for(int i =0 ; i< count; i++){
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	3301      	adds	r3, #1
 8000260:	60fb      	str	r3, [r7, #12]
 8000262:	78fb      	ldrb	r3, [r7, #3]
 8000264:	68fa      	ldr	r2, [r7, #12]
 8000266:	429a      	cmp	r2, r3
 8000268:	db95      	blt.n	8000196 <handle_rx_data+0x26>

		}

	}
	free(receive_data);
 800026a:	6878      	ldr	r0, [r7, #4]
 800026c:	f002 fb6e 	bl	800294c <free>
 8000270:	e000      	b.n	8000274 <handle_rx_data+0x104>
		return;
 8000272:	bf00      	nop


}
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	20000120 	.word	0x20000120
 8000280:	2000011c 	.word	0x2000011c
 8000284:	20000124 	.word	0x20000124
 8000288:	2000011e 	.word	0x2000011e

0800028c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


my_lora.CS_port		= NSS_GPIO_Port	;		my_lora.reset_port	= RST_GPIO_Port	;
 8000290:	4b48      	ldr	r3, [pc, #288]	; (80003b4 <main+0x128>)
 8000292:	4a49      	ldr	r2, [pc, #292]	; (80003b8 <main+0x12c>)
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	4b47      	ldr	r3, [pc, #284]	; (80003b4 <main+0x128>)
 8000298:	4a47      	ldr	r2, [pc, #284]	; (80003b8 <main+0x12c>)
 800029a:	609a      	str	r2, [r3, #8]
my_lora.CS_pin		= NSS_Pin		;		my_lora.reset_pin	= RST_Pin		;
 800029c:	4b45      	ldr	r3, [pc, #276]	; (80003b4 <main+0x128>)
 800029e:	2202      	movs	r2, #2
 80002a0:	809a      	strh	r2, [r3, #4]
 80002a2:	4b44      	ldr	r3, [pc, #272]	; (80003b4 <main+0x128>)
 80002a4:	2201      	movs	r2, #1
 80002a6:	819a      	strh	r2, [r3, #12]

my_lora.DIO0_port	= DIO0_GPIO_Port;
 80002a8:	4b42      	ldr	r3, [pc, #264]	; (80003b4 <main+0x128>)
 80002aa:	4a43      	ldr	r2, [pc, #268]	; (80003b8 <main+0x12c>)
 80002ac:	611a      	str	r2, [r3, #16]
my_lora.reset_pin	= DIO0_Pin		;		my_lora.hSPIx		= &hspi1			;
 80002ae:	4b41      	ldr	r3, [pc, #260]	; (80003b4 <main+0x128>)
 80002b0:	2204      	movs	r2, #4
 80002b2:	819a      	strh	r2, [r3, #12]
 80002b4:	4b3f      	ldr	r3, [pc, #252]	; (80003b4 <main+0x128>)
 80002b6:	4a41      	ldr	r2, [pc, #260]	; (80003bc <main+0x130>)
 80002b8:	619a      	str	r2, [r3, #24]

my_lora.frequency             = 434;             // default = 433 MHz
 80002ba:	4b3e      	ldr	r3, [pc, #248]	; (80003b4 <main+0x128>)
 80002bc:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
 80002c0:	621a      	str	r2, [r3, #32]
my_lora.spredingFactor        = SF_9;            // default = SF_7
 80002c2:	4b3c      	ldr	r3, [pc, #240]	; (80003b4 <main+0x128>)
 80002c4:	2209      	movs	r2, #9
 80002c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
my_lora.bandWidth             = BW_250KHz;       // default = BW_125KHz
 80002ca:	4b3a      	ldr	r3, [pc, #232]	; (80003b4 <main+0x128>)
 80002cc:	2208      	movs	r2, #8
 80002ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
my_lora.crcRate               = CR_4_8;          // default = CR_4_5
 80002d2:	4b38      	ldr	r3, [pc, #224]	; (80003b4 <main+0x128>)
 80002d4:	2204      	movs	r2, #4
 80002d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
my_lora.power                 = POWER_17db;      // default = 20db
 80002da:	4b36      	ldr	r3, [pc, #216]	; (80003b4 <main+0x128>)
 80002dc:	22fc      	movs	r2, #252	; 0xfc
 80002de:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
my_lora.overCurrentProtection = 120;             // default = 100 mA
 80002e2:	4b34      	ldr	r3, [pc, #208]	; (80003b4 <main+0x128>)
 80002e4:	2278      	movs	r2, #120	; 0x78
 80002e6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
my_lora.preamble              = 10;              // default = 8;
 80002ea:	4b32      	ldr	r3, [pc, #200]	; (80003b4 <main+0x128>)
 80002ec:	220a      	movs	r2, #10
 80002ee:	851a      	strh	r2, [r3, #40]	; 0x28

LoRa_reset(&my_lora);
 80002f0:	4830      	ldr	r0, [pc, #192]	; (80003b4 <main+0x128>)
 80002f2:	f001 ff3d 	bl	8002170 <LoRa_reset>
LoRa_init(&my_lora);
 80002f6:	482f      	ldr	r0, [pc, #188]	; (80003b4 <main+0x128>)
 80002f8:	f002 fa45 	bl	8002786 <LoRa_init>
//
LoRa_startReceiving(&my_lora);
 80002fc:	482d      	ldr	r0, [pc, #180]	; (80003b4 <main+0x128>)
 80002fe:	f002 f9de 	bl	80026be <LoRa_startReceiving>
send_data[0] = 0X30;   /// slave address
 8000302:	4b2f      	ldr	r3, [pc, #188]	; (80003c0 <main+0x134>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2230      	movs	r2, #48	; 0x30
 8000308:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030a:	f000 fa5d 	bl	80007c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030e:	f000 f85f 	bl	80003d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000312:	f000 f8d1 	bl	80004b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000316:	f000 f89d 	bl	8000454 <MX_SPI1_Init>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  ///-------------Transmit---------------///
	  send_data = (uint8_t *)malloc(10*sizeof(uint8_t));
 800031a:	200a      	movs	r0, #10
 800031c:	f002 fb0e 	bl	800293c <malloc>
 8000320:	4603      	mov	r3, r0
 8000322:	461a      	mov	r2, r3
 8000324:	4b26      	ldr	r3, [pc, #152]	; (80003c0 <main+0x134>)
 8000326:	601a      	str	r2, [r3, #0]
	  if(send_data == NULL)
 8000328:	4b25      	ldr	r3, [pc, #148]	; (80003c0 <main+0x134>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d101      	bne.n	8000334 <main+0xa8>
		  return 0;
 8000330:	2300      	movs	r3, #0
 8000332:	e03c      	b.n	80003ae <main+0x122>

	  send_data[0] = 0x30;
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <main+0x134>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2230      	movs	r2, #48	; 0x30
 800033a:	701a      	strb	r2, [r3, #0]
//	  for(count =1;count<4;count++){
//
//	  	send_data[count] =  48+count;
//	  }
	  send_data[1] = 100;
 800033c:	4b20      	ldr	r3, [pc, #128]	; (80003c0 <main+0x134>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	3301      	adds	r3, #1
 8000342:	2264      	movs	r2, #100	; 0x64
 8000344:	701a      	strb	r2, [r3, #0]
	  send_data[2] = (uint8_t)('v');
 8000346:	4b1e      	ldr	r3, [pc, #120]	; (80003c0 <main+0x134>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3302      	adds	r3, #2
 800034c:	2276      	movs	r2, #118	; 0x76
 800034e:	701a      	strb	r2, [r3, #0]

	  LoRa_transmit(&my_lora, send_data, 10, 500);
 8000350:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <main+0x134>)
 8000352:	6819      	ldr	r1, [r3, #0]
 8000354:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000358:	220a      	movs	r2, #10
 800035a:	4816      	ldr	r0, [pc, #88]	; (80003b4 <main+0x128>)
 800035c:	f002 f957 	bl	800260e <LoRa_transmit>
	  free(send_data);
 8000360:	4b17      	ldr	r3, [pc, #92]	; (80003c0 <main+0x134>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4618      	mov	r0, r3
 8000366:	f002 faf1 	bl	800294c <free>

	  ///------------Recieve----------------///
	  rx_count = LoRa_receive(&my_lora, read_data, 128);
 800036a:	4b16      	ldr	r3, [pc, #88]	; (80003c4 <main+0x138>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2280      	movs	r2, #128	; 0x80
 8000370:	4619      	mov	r1, r3
 8000372:	4810      	ldr	r0, [pc, #64]	; (80003b4 <main+0x128>)
 8000374:	f002 f9af 	bl	80026d6 <LoRa_receive>
 8000378:	4603      	mov	r3, r0
 800037a:	461a      	mov	r2, r3
 800037c:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <main+0x13c>)
 800037e:	701a      	strb	r2, [r3, #0]

	  handle_rx_data(read_data, rx_count);
 8000380:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <main+0x138>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a10      	ldr	r2, [pc, #64]	; (80003c8 <main+0x13c>)
 8000386:	7812      	ldrb	r2, [r2, #0]
 8000388:	4611      	mov	r1, r2
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff fef0 	bl	8000170 <handle_rx_data>


	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000390:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000394:	480d      	ldr	r0, [pc, #52]	; (80003cc <main+0x140>)
 8000396:	f000 fd47 	bl	8000e28 <HAL_GPIO_TogglePin>
	  //// free read_data after handling receive data ///
	  free(read_data);
 800039a:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <main+0x138>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4618      	mov	r0, r3
 80003a0:	f002 fad4 	bl	800294c <free>

	  HAL_Delay(1000);
 80003a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a8:	f000 fa70 	bl	800088c <HAL_Delay>
	  send_data = (uint8_t *)malloc(10*sizeof(uint8_t));
 80003ac:	e7b5      	b.n	800031a <main+0x8e>

  }
  /* USER CODE END 3 */
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	200000e4 	.word	0x200000e4
 80003b8:	40010c00 	.word	0x40010c00
 80003bc:	2000008c 	.word	0x2000008c
 80003c0:	20000118 	.word	0x20000118
 80003c4:	20000110 	.word	0x20000110
 80003c8:	20000114 	.word	0x20000114
 80003cc:	40011000 	.word	0x40011000

080003d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b090      	sub	sp, #64	; 0x40
 80003d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d6:	f107 0318 	add.w	r3, r7, #24
 80003da:	2228      	movs	r2, #40	; 0x28
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f002 fabc 	bl	800295c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
 80003f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f2:	2302      	movs	r3, #2
 80003f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f6:	2301      	movs	r3, #1
 80003f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003fa:	2310      	movs	r3, #16
 80003fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fe:	2302      	movs	r3, #2
 8000400:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000402:	2300      	movs	r3, #0
 8000404:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000406:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800040a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040c:	f107 0318 	add.w	r3, r7, #24
 8000410:	4618      	mov	r0, r3
 8000412:	f000 fd3b 	bl	8000e8c <HAL_RCC_OscConfig>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800041c:	f000 f8c2 	bl	80005a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000420:	230f      	movs	r3, #15
 8000422:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000424:	2302      	movs	r3, #2
 8000426:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000428:	2300      	movs	r3, #0
 800042a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800042c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000430:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f000 ffa8 	bl	8001390 <HAL_RCC_ClockConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000446:	f000 f8ad 	bl	80005a4 <Error_Handler>
  }
}
 800044a:	bf00      	nop
 800044c:	3740      	adds	r7, #64	; 0x40
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
	...

08000454 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000458:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <MX_SPI1_Init+0x5c>)
 800045a:	4a16      	ldr	r2, [pc, #88]	; (80004b4 <MX_SPI1_Init+0x60>)
 800045c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800045e:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <MX_SPI1_Init+0x5c>)
 8000460:	2200      	movs	r2, #0
 8000462:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <MX_SPI1_Init+0x5c>)
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <MX_SPI1_Init+0x5c>)
 800046c:	2200      	movs	r2, #0
 800046e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MX_SPI1_Init+0x5c>)
 8000472:	2200      	movs	r2, #0
 8000474:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <MX_SPI1_Init+0x5c>)
 8000478:	2200      	movs	r2, #0
 800047a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <MX_SPI1_Init+0x5c>)
 800047e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000482:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000484:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <MX_SPI1_Init+0x5c>)
 8000486:	2200      	movs	r2, #0
 8000488:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <MX_SPI1_Init+0x5c>)
 800048c:	2200      	movs	r2, #0
 800048e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <MX_SPI1_Init+0x5c>)
 8000492:	2200      	movs	r2, #0
 8000494:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <MX_SPI1_Init+0x5c>)
 8000498:	220a      	movs	r2, #10
 800049a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800049c:	4804      	ldr	r0, [pc, #16]	; (80004b0 <MX_SPI1_Init+0x5c>)
 800049e:	f001 f8d3 	bl	8001648 <HAL_SPI_Init>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80004a8:	f000 f87c 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	2000008c 	.word	0x2000008c
 80004b4:	40013000 	.word	0x40013000

080004b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004cc:	4b31      	ldr	r3, [pc, #196]	; (8000594 <MX_GPIO_Init+0xdc>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a30      	ldr	r2, [pc, #192]	; (8000594 <MX_GPIO_Init+0xdc>)
 80004d2:	f043 0310 	orr.w	r3, r3, #16
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b2e      	ldr	r3, [pc, #184]	; (8000594 <MX_GPIO_Init+0xdc>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0310 	and.w	r3, r3, #16
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e4:	4b2b      	ldr	r3, [pc, #172]	; (8000594 <MX_GPIO_Init+0xdc>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a2a      	ldr	r2, [pc, #168]	; (8000594 <MX_GPIO_Init+0xdc>)
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b28      	ldr	r3, [pc, #160]	; (8000594 <MX_GPIO_Init+0xdc>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0304 	and.w	r3, r3, #4
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fc:	4b25      	ldr	r3, [pc, #148]	; (8000594 <MX_GPIO_Init+0xdc>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a24      	ldr	r2, [pc, #144]	; (8000594 <MX_GPIO_Init+0xdc>)
 8000502:	f043 0308 	orr.w	r3, r3, #8
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b22      	ldr	r3, [pc, #136]	; (8000594 <MX_GPIO_Init+0xdc>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0308 	and.w	r3, r3, #8
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051a:	481f      	ldr	r0, [pc, #124]	; (8000598 <MX_GPIO_Init+0xe0>)
 800051c:	f000 fc6c 	bl	8000df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Pin|NSS_Pin, GPIO_PIN_SET);
 8000520:	2201      	movs	r2, #1
 8000522:	2103      	movs	r1, #3
 8000524:	481d      	ldr	r0, [pc, #116]	; (800059c <MX_GPIO_Init+0xe4>)
 8000526:	f000 fc67 	bl	8000df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800052a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800052e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000530:	2301      	movs	r3, #1
 8000532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000538:	2302      	movs	r3, #2
 800053a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	4619      	mov	r1, r3
 8000542:	4815      	ldr	r0, [pc, #84]	; (8000598 <MX_GPIO_Init+0xe0>)
 8000544:	f000 fad4 	bl	8000af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin NSS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|NSS_Pin;
 8000548:	2303      	movs	r3, #3
 800054a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054c:	2301      	movs	r3, #1
 800054e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000554:	2302      	movs	r3, #2
 8000556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	4619      	mov	r1, r3
 800055e:	480f      	ldr	r0, [pc, #60]	; (800059c <MX_GPIO_Init+0xe4>)
 8000560:	f000 fac6 	bl	8000af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000564:	2304      	movs	r3, #4
 8000566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000568:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <MX_GPIO_Init+0xe8>)
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	4619      	mov	r1, r3
 8000576:	4809      	ldr	r0, [pc, #36]	; (800059c <MX_GPIO_Init+0xe4>)
 8000578:	f000 faba 	bl	8000af0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	2100      	movs	r1, #0
 8000580:	2008      	movs	r0, #8
 8000582:	f000 fa7e 	bl	8000a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000586:	2008      	movs	r0, #8
 8000588:	f000 fa97 	bl	8000aba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800058c:	bf00      	nop
 800058e:	3720      	adds	r7, #32
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000
 8000598:	40011000 	.word	0x40011000
 800059c:	40010c00 	.word	0x40010c00
 80005a0:	10110000 	.word	0x10110000

080005a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a8:	b672      	cpsid	i
}
 80005aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ac:	e7fe      	b.n	80005ac <Error_Handler+0x8>
	...

080005b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_MspInit+0x5c>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	4a14      	ldr	r2, [pc, #80]	; (800060c <HAL_MspInit+0x5c>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6193      	str	r3, [r2, #24]
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_MspInit+0x5c>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <HAL_MspInit+0x5c>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a0e      	ldr	r2, [pc, #56]	; (800060c <HAL_MspInit+0x5c>)
 80005d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <HAL_MspInit+0x5c>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <HAL_MspInit+0x60>)
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <HAL_MspInit+0x60>)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	40021000 	.word	0x40021000
 8000610:	40010000 	.word	0x40010000

08000614 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a1b      	ldr	r2, [pc, #108]	; (800069c <HAL_SPI_MspInit+0x88>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d12f      	bne.n	8000694 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <HAL_SPI_MspInit+0x8c>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <HAL_SPI_MspInit+0x8c>)
 800063a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <HAL_SPI_MspInit+0x8c>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <HAL_SPI_MspInit+0x8c>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <HAL_SPI_MspInit+0x8c>)
 8000652:	f043 0304 	orr.w	r3, r3, #4
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <HAL_SPI_MspInit+0x8c>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0304 	and.w	r3, r3, #4
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000664:	23a0      	movs	r3, #160	; 0xa0
 8000666:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	4619      	mov	r1, r3
 8000676:	480b      	ldr	r0, [pc, #44]	; (80006a4 <HAL_SPI_MspInit+0x90>)
 8000678:	f000 fa3a 	bl	8000af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800067c:	2340      	movs	r3, #64	; 0x40
 800067e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000680:	2302      	movs	r3, #2
 8000682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000684:	2303      	movs	r3, #3
 8000686:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	4619      	mov	r1, r3
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <HAL_SPI_MspInit+0x90>)
 8000690:	f000 fa2e 	bl	8000af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40013000 	.word	0x40013000
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40010800 	.word	0x40010800

080006a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <NMI_Handler+0x4>

080006ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <HardFault_Handler+0x4>

080006b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <MemManage_Handler+0x4>

080006ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006be:	e7fe      	b.n	80006be <BusFault_Handler+0x4>

080006c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <UsageFault_Handler+0x4>

080006c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr

080006d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr

080006de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr

080006ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ee:	f000 f8b1 	bl	8000854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80006fa:	2004      	movs	r0, #4
 80006fc:	f000 fbae 	bl	8000e5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}

08000704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800070c:	4a14      	ldr	r2, [pc, #80]	; (8000760 <_sbrk+0x5c>)
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <_sbrk+0x60>)
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000718:	4b13      	ldr	r3, [pc, #76]	; (8000768 <_sbrk+0x64>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d102      	bne.n	8000726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <_sbrk+0x64>)
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <_sbrk+0x68>)
 8000724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <_sbrk+0x64>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	429a      	cmp	r2, r3
 8000732:	d207      	bcs.n	8000744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000734:	f002 f8d8 	bl	80028e8 <__errno>
 8000738:	4603      	mov	r3, r0
 800073a:	220c      	movs	r2, #12
 800073c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800073e:	f04f 33ff 	mov.w	r3, #4294967295
 8000742:	e009      	b.n	8000758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <_sbrk+0x64>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800074a:	4b07      	ldr	r3, [pc, #28]	; (8000768 <_sbrk+0x64>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	4a05      	ldr	r2, [pc, #20]	; (8000768 <_sbrk+0x64>)
 8000754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000756:	68fb      	ldr	r3, [r7, #12]
}
 8000758:	4618      	mov	r0, r3
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20005000 	.word	0x20005000
 8000764:	00000400 	.word	0x00000400
 8000768:	20000128 	.word	0x20000128
 800076c:	20000140 	.word	0x20000140

08000770 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800077c:	f7ff fff8 	bl	8000770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000780:	480b      	ldr	r0, [pc, #44]	; (80007b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000782:	490c      	ldr	r1, [pc, #48]	; (80007b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000784:	4a0c      	ldr	r2, [pc, #48]	; (80007b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000788:	e002      	b.n	8000790 <LoopCopyDataInit>

0800078a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800078c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078e:	3304      	adds	r3, #4

08000790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000794:	d3f9      	bcc.n	800078a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000796:	4a09      	ldr	r2, [pc, #36]	; (80007bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000798:	4c09      	ldr	r4, [pc, #36]	; (80007c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800079c:	e001      	b.n	80007a2 <LoopFillZerobss>

0800079e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a0:	3204      	adds	r2, #4

080007a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a4:	d3fb      	bcc.n	800079e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007a6:	f002 f8a5 	bl	80028f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007aa:	f7ff fd6f 	bl	800028c <main>
  bx lr
 80007ae:	4770      	bx	lr
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007b8:	08002e74 	.word	0x08002e74
  ldr r2, =_sbss
 80007bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007c0:	20000140 	.word	0x20000140

080007c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC1_2_IRQHandler>
	...

080007c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <HAL_Init+0x28>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <HAL_Init+0x28>)
 80007d2:	f043 0310 	orr.w	r3, r3, #16
 80007d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d8:	2003      	movs	r0, #3
 80007da:	f000 f947 	bl	8000a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007de:	200f      	movs	r0, #15
 80007e0:	f000 f808 	bl	80007f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e4:	f7ff fee4 	bl	80005b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40022000 	.word	0x40022000

080007f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_InitTick+0x54>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_InitTick+0x58>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4619      	mov	r1, r3
 8000806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080a:	fbb3 f3f1 	udiv	r3, r3, r1
 800080e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000812:	4618      	mov	r0, r3
 8000814:	f000 f95f 	bl	8000ad6 <HAL_SYSTICK_Config>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
 8000820:	e00e      	b.n	8000840 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b0f      	cmp	r3, #15
 8000826:	d80a      	bhi.n	800083e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000828:	2200      	movs	r2, #0
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	f04f 30ff 	mov.w	r0, #4294967295
 8000830:	f000 f927 	bl	8000a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000834:	4a06      	ldr	r2, [pc, #24]	; (8000850 <HAL_InitTick+0x5c>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800083a:	2300      	movs	r3, #0
 800083c:	e000      	b.n	8000840 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
}
 8000840:	4618      	mov	r0, r3
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000000 	.word	0x20000000
 800084c:	20000008 	.word	0x20000008
 8000850:	20000004 	.word	0x20000004

08000854 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <HAL_IncTick+0x1c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	461a      	mov	r2, r3
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_IncTick+0x20>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4413      	add	r3, r2
 8000864:	4a03      	ldr	r2, [pc, #12]	; (8000874 <HAL_IncTick+0x20>)
 8000866:	6013      	str	r3, [r2, #0]
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	20000008 	.word	0x20000008
 8000874:	2000012c 	.word	0x2000012c

08000878 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return uwTick;
 800087c:	4b02      	ldr	r3, [pc, #8]	; (8000888 <HAL_GetTick+0x10>)
 800087e:	681b      	ldr	r3, [r3, #0]
}
 8000880:	4618      	mov	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	2000012c 	.word	0x2000012c

0800088c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000894:	f7ff fff0 	bl	8000878 <HAL_GetTick>
 8000898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a4:	d005      	beq.n	80008b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <HAL_Delay+0x44>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	461a      	mov	r2, r3
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	4413      	add	r3, r2
 80008b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008b2:	bf00      	nop
 80008b4:	f7ff ffe0 	bl	8000878 <HAL_GetTick>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d8f7      	bhi.n	80008b4 <HAL_Delay+0x28>
  {
  }
}
 80008c4:	bf00      	nop
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000008 	.word	0x20000008

080008d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f0:	4013      	ands	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000906:	4a04      	ldr	r2, [pc, #16]	; (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	60d3      	str	r3, [r2, #12]
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000920:	4b04      	ldr	r3, [pc, #16]	; (8000934 <__NVIC_GetPriorityGrouping+0x18>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	0a1b      	lsrs	r3, r3, #8
 8000926:	f003 0307 	and.w	r3, r3, #7
}
 800092a:	4618      	mov	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	2b00      	cmp	r3, #0
 8000948:	db0b      	blt.n	8000962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	f003 021f 	and.w	r2, r3, #31
 8000950:	4906      	ldr	r1, [pc, #24]	; (800096c <__NVIC_EnableIRQ+0x34>)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	095b      	lsrs	r3, r3, #5
 8000958:	2001      	movs	r0, #1
 800095a:	fa00 f202 	lsl.w	r2, r0, r2
 800095e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	e000e100 	.word	0xe000e100

08000970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	6039      	str	r1, [r7, #0]
 800097a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	db0a      	blt.n	800099a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	b2da      	uxtb	r2, r3
 8000988:	490c      	ldr	r1, [pc, #48]	; (80009bc <__NVIC_SetPriority+0x4c>)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	0112      	lsls	r2, r2, #4
 8000990:	b2d2      	uxtb	r2, r2
 8000992:	440b      	add	r3, r1
 8000994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000998:	e00a      	b.n	80009b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4908      	ldr	r1, [pc, #32]	; (80009c0 <__NVIC_SetPriority+0x50>)
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	f003 030f 	and.w	r3, r3, #15
 80009a6:	3b04      	subs	r3, #4
 80009a8:	0112      	lsls	r2, r2, #4
 80009aa:	b2d2      	uxtb	r2, r2
 80009ac:	440b      	add	r3, r1
 80009ae:	761a      	strb	r2, [r3, #24]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000e100 	.word	0xe000e100
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b089      	sub	sp, #36	; 0x24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	f1c3 0307 	rsb	r3, r3, #7
 80009de:	2b04      	cmp	r3, #4
 80009e0:	bf28      	it	cs
 80009e2:	2304      	movcs	r3, #4
 80009e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3304      	adds	r3, #4
 80009ea:	2b06      	cmp	r3, #6
 80009ec:	d902      	bls.n	80009f4 <NVIC_EncodePriority+0x30>
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3b03      	subs	r3, #3
 80009f2:	e000      	b.n	80009f6 <NVIC_EncodePriority+0x32>
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	f04f 32ff 	mov.w	r2, #4294967295
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43da      	mvns	r2, r3
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	401a      	ands	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	43d9      	mvns	r1, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	4313      	orrs	r3, r2
         );
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3724      	adds	r7, #36	; 0x24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a38:	d301      	bcc.n	8000a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e00f      	b.n	8000a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <SysTick_Config+0x40>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a46:	210f      	movs	r1, #15
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	f7ff ff90 	bl	8000970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <SysTick_Config+0x40>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a56:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <SysTick_Config+0x40>)
 8000a58:	2207      	movs	r2, #7
 8000a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	e000e010 	.word	0xe000e010

08000a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ff2d 	bl	80008d4 <__NVIC_SetPriorityGrouping>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4603      	mov	r3, r0
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
 8000a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a94:	f7ff ff42 	bl	800091c <__NVIC_GetPriorityGrouping>
 8000a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	68b9      	ldr	r1, [r7, #8]
 8000a9e:	6978      	ldr	r0, [r7, #20]
 8000aa0:	f7ff ff90 	bl	80009c4 <NVIC_EncodePriority>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff5f 	bl	8000970 <__NVIC_SetPriority>
}
 8000ab2:	bf00      	nop
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff35 	bl	8000938 <__NVIC_EnableIRQ>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ffa2 	bl	8000a28 <SysTick_Config>
 8000ae4:	4603      	mov	r3, r0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b08b      	sub	sp, #44	; 0x2c
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b02:	e169      	b.n	8000dd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b04:	2201      	movs	r2, #1
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	69fa      	ldr	r2, [r7, #28]
 8000b14:	4013      	ands	r3, r2
 8000b16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f040 8158 	bne.w	8000dd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	4a9a      	ldr	r2, [pc, #616]	; (8000d90 <HAL_GPIO_Init+0x2a0>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d05e      	beq.n	8000bea <HAL_GPIO_Init+0xfa>
 8000b2c:	4a98      	ldr	r2, [pc, #608]	; (8000d90 <HAL_GPIO_Init+0x2a0>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d875      	bhi.n	8000c1e <HAL_GPIO_Init+0x12e>
 8000b32:	4a98      	ldr	r2, [pc, #608]	; (8000d94 <HAL_GPIO_Init+0x2a4>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d058      	beq.n	8000bea <HAL_GPIO_Init+0xfa>
 8000b38:	4a96      	ldr	r2, [pc, #600]	; (8000d94 <HAL_GPIO_Init+0x2a4>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d86f      	bhi.n	8000c1e <HAL_GPIO_Init+0x12e>
 8000b3e:	4a96      	ldr	r2, [pc, #600]	; (8000d98 <HAL_GPIO_Init+0x2a8>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d052      	beq.n	8000bea <HAL_GPIO_Init+0xfa>
 8000b44:	4a94      	ldr	r2, [pc, #592]	; (8000d98 <HAL_GPIO_Init+0x2a8>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d869      	bhi.n	8000c1e <HAL_GPIO_Init+0x12e>
 8000b4a:	4a94      	ldr	r2, [pc, #592]	; (8000d9c <HAL_GPIO_Init+0x2ac>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d04c      	beq.n	8000bea <HAL_GPIO_Init+0xfa>
 8000b50:	4a92      	ldr	r2, [pc, #584]	; (8000d9c <HAL_GPIO_Init+0x2ac>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d863      	bhi.n	8000c1e <HAL_GPIO_Init+0x12e>
 8000b56:	4a92      	ldr	r2, [pc, #584]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d046      	beq.n	8000bea <HAL_GPIO_Init+0xfa>
 8000b5c:	4a90      	ldr	r2, [pc, #576]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d85d      	bhi.n	8000c1e <HAL_GPIO_Init+0x12e>
 8000b62:	2b12      	cmp	r3, #18
 8000b64:	d82a      	bhi.n	8000bbc <HAL_GPIO_Init+0xcc>
 8000b66:	2b12      	cmp	r3, #18
 8000b68:	d859      	bhi.n	8000c1e <HAL_GPIO_Init+0x12e>
 8000b6a:	a201      	add	r2, pc, #4	; (adr r2, 8000b70 <HAL_GPIO_Init+0x80>)
 8000b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b70:	08000beb 	.word	0x08000beb
 8000b74:	08000bc5 	.word	0x08000bc5
 8000b78:	08000bd7 	.word	0x08000bd7
 8000b7c:	08000c19 	.word	0x08000c19
 8000b80:	08000c1f 	.word	0x08000c1f
 8000b84:	08000c1f 	.word	0x08000c1f
 8000b88:	08000c1f 	.word	0x08000c1f
 8000b8c:	08000c1f 	.word	0x08000c1f
 8000b90:	08000c1f 	.word	0x08000c1f
 8000b94:	08000c1f 	.word	0x08000c1f
 8000b98:	08000c1f 	.word	0x08000c1f
 8000b9c:	08000c1f 	.word	0x08000c1f
 8000ba0:	08000c1f 	.word	0x08000c1f
 8000ba4:	08000c1f 	.word	0x08000c1f
 8000ba8:	08000c1f 	.word	0x08000c1f
 8000bac:	08000c1f 	.word	0x08000c1f
 8000bb0:	08000c1f 	.word	0x08000c1f
 8000bb4:	08000bcd 	.word	0x08000bcd
 8000bb8:	08000be1 	.word	0x08000be1
 8000bbc:	4a79      	ldr	r2, [pc, #484]	; (8000da4 <HAL_GPIO_Init+0x2b4>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d013      	beq.n	8000bea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bc2:	e02c      	b.n	8000c1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	623b      	str	r3, [r7, #32]
          break;
 8000bca:	e029      	b.n	8000c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	623b      	str	r3, [r7, #32]
          break;
 8000bd4:	e024      	b.n	8000c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	3308      	adds	r3, #8
 8000bdc:	623b      	str	r3, [r7, #32]
          break;
 8000bde:	e01f      	b.n	8000c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	330c      	adds	r3, #12
 8000be6:	623b      	str	r3, [r7, #32]
          break;
 8000be8:	e01a      	b.n	8000c20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d102      	bne.n	8000bf8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	623b      	str	r3, [r7, #32]
          break;
 8000bf6:	e013      	b.n	8000c20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d105      	bne.n	8000c0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c00:	2308      	movs	r3, #8
 8000c02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69fa      	ldr	r2, [r7, #28]
 8000c08:	611a      	str	r2, [r3, #16]
          break;
 8000c0a:	e009      	b.n	8000c20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c0c:	2308      	movs	r3, #8
 8000c0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	69fa      	ldr	r2, [r7, #28]
 8000c14:	615a      	str	r2, [r3, #20]
          break;
 8000c16:	e003      	b.n	8000c20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
          break;
 8000c1c:	e000      	b.n	8000c20 <HAL_GPIO_Init+0x130>
          break;
 8000c1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	2bff      	cmp	r3, #255	; 0xff
 8000c24:	d801      	bhi.n	8000c2a <HAL_GPIO_Init+0x13a>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	e001      	b.n	8000c2e <HAL_GPIO_Init+0x13e>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	2bff      	cmp	r3, #255	; 0xff
 8000c34:	d802      	bhi.n	8000c3c <HAL_GPIO_Init+0x14c>
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	e002      	b.n	8000c42 <HAL_GPIO_Init+0x152>
 8000c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3e:	3b08      	subs	r3, #8
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	210f      	movs	r1, #15
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	401a      	ands	r2, r3
 8000c54:	6a39      	ldr	r1, [r7, #32]
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f000 80b1 	beq.w	8000dd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c70:	4b4d      	ldr	r3, [pc, #308]	; (8000da8 <HAL_GPIO_Init+0x2b8>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a4c      	ldr	r2, [pc, #304]	; (8000da8 <HAL_GPIO_Init+0x2b8>)
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b4a      	ldr	r3, [pc, #296]	; (8000da8 <HAL_GPIO_Init+0x2b8>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c88:	4a48      	ldr	r2, [pc, #288]	; (8000dac <HAL_GPIO_Init+0x2bc>)
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	089b      	lsrs	r3, r3, #2
 8000c8e:	3302      	adds	r3, #2
 8000c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	220f      	movs	r2, #15
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a40      	ldr	r2, [pc, #256]	; (8000db0 <HAL_GPIO_Init+0x2c0>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d013      	beq.n	8000cdc <HAL_GPIO_Init+0x1ec>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a3f      	ldr	r2, [pc, #252]	; (8000db4 <HAL_GPIO_Init+0x2c4>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d00d      	beq.n	8000cd8 <HAL_GPIO_Init+0x1e8>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a3e      	ldr	r2, [pc, #248]	; (8000db8 <HAL_GPIO_Init+0x2c8>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d007      	beq.n	8000cd4 <HAL_GPIO_Init+0x1e4>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a3d      	ldr	r2, [pc, #244]	; (8000dbc <HAL_GPIO_Init+0x2cc>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d101      	bne.n	8000cd0 <HAL_GPIO_Init+0x1e0>
 8000ccc:	2303      	movs	r3, #3
 8000cce:	e006      	b.n	8000cde <HAL_GPIO_Init+0x1ee>
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	e004      	b.n	8000cde <HAL_GPIO_Init+0x1ee>
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	e002      	b.n	8000cde <HAL_GPIO_Init+0x1ee>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e000      	b.n	8000cde <HAL_GPIO_Init+0x1ee>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ce0:	f002 0203 	and.w	r2, r2, #3
 8000ce4:	0092      	lsls	r2, r2, #2
 8000ce6:	4093      	lsls	r3, r2
 8000ce8:	68fa      	ldr	r2, [r7, #12]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cee:	492f      	ldr	r1, [pc, #188]	; (8000dac <HAL_GPIO_Init+0x2bc>)
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	089b      	lsrs	r3, r3, #2
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d006      	beq.n	8000d16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d08:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	492c      	ldr	r1, [pc, #176]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	608b      	str	r3, [r1, #8]
 8000d14:	e006      	b.n	8000d24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d16:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	4928      	ldr	r1, [pc, #160]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d20:	4013      	ands	r3, r2
 8000d22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d006      	beq.n	8000d3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d30:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	4922      	ldr	r1, [pc, #136]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	60cb      	str	r3, [r1, #12]
 8000d3c:	e006      	b.n	8000d4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d3e:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d40:	68da      	ldr	r2, [r3, #12]
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	491e      	ldr	r1, [pc, #120]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d006      	beq.n	8000d66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	4918      	ldr	r1, [pc, #96]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	604b      	str	r3, [r1, #4]
 8000d64:	e006      	b.n	8000d74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	4914      	ldr	r1, [pc, #80]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d70:	4013      	ands	r3, r2
 8000d72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d021      	beq.n	8000dc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	490e      	ldr	r1, [pc, #56]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	600b      	str	r3, [r1, #0]
 8000d8c:	e021      	b.n	8000dd2 <HAL_GPIO_Init+0x2e2>
 8000d8e:	bf00      	nop
 8000d90:	10320000 	.word	0x10320000
 8000d94:	10310000 	.word	0x10310000
 8000d98:	10220000 	.word	0x10220000
 8000d9c:	10210000 	.word	0x10210000
 8000da0:	10120000 	.word	0x10120000
 8000da4:	10110000 	.word	0x10110000
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010000 	.word	0x40010000
 8000db0:	40010800 	.word	0x40010800
 8000db4:	40010c00 	.word	0x40010c00
 8000db8:	40011000 	.word	0x40011000
 8000dbc:	40011400 	.word	0x40011400
 8000dc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_GPIO_Init+0x304>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	4909      	ldr	r1, [pc, #36]	; (8000df4 <HAL_GPIO_Init+0x304>)
 8000dce:	4013      	ands	r3, r2
 8000dd0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dde:	fa22 f303 	lsr.w	r3, r2, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f47f ae8e 	bne.w	8000b04 <HAL_GPIO_Init+0x14>
  }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	372c      	adds	r7, #44	; 0x2c
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	40010400 	.word	0x40010400

08000df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	807b      	strh	r3, [r7, #2]
 8000e04:	4613      	mov	r3, r2
 8000e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e08:	787b      	ldrb	r3, [r7, #1]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e0e:	887a      	ldrh	r2, [r7, #2]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e14:	e003      	b.n	8000e1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e16:	887b      	ldrh	r3, [r7, #2]
 8000e18:	041a      	lsls	r2, r3, #16
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	611a      	str	r2, [r3, #16]
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e3a:	887a      	ldrh	r2, [r7, #2]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	041a      	lsls	r2, r3, #16
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	43d9      	mvns	r1, r3
 8000e46:	887b      	ldrh	r3, [r7, #2]
 8000e48:	400b      	ands	r3, r1
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	611a      	str	r2, [r3, #16]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
	...

08000e5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e68:	695a      	ldr	r2, [r3, #20]
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d006      	beq.n	8000e80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff f966 	bl	800014c <HAL_GPIO_EXTI_Callback>
  }
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40010400 	.word	0x40010400

08000e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e272      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 8087 	beq.w	8000fba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eac:	4b92      	ldr	r3, [pc, #584]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 030c 	and.w	r3, r3, #12
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d00c      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eb8:	4b8f      	ldr	r3, [pc, #572]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 030c 	and.w	r3, r3, #12
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	d112      	bne.n	8000eea <HAL_RCC_OscConfig+0x5e>
 8000ec4:	4b8c      	ldr	r3, [pc, #560]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed0:	d10b      	bne.n	8000eea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed2:	4b89      	ldr	r3, [pc, #548]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d06c      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x12c>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d168      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e24c      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef2:	d106      	bne.n	8000f02 <HAL_RCC_OscConfig+0x76>
 8000ef4:	4b80      	ldr	r3, [pc, #512]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a7f      	ldr	r2, [pc, #508]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	e02e      	b.n	8000f60 <HAL_RCC_OscConfig+0xd4>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10c      	bne.n	8000f24 <HAL_RCC_OscConfig+0x98>
 8000f0a:	4b7b      	ldr	r3, [pc, #492]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a7a      	ldr	r2, [pc, #488]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	4b78      	ldr	r3, [pc, #480]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a77      	ldr	r2, [pc, #476]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	e01d      	b.n	8000f60 <HAL_RCC_OscConfig+0xd4>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f2c:	d10c      	bne.n	8000f48 <HAL_RCC_OscConfig+0xbc>
 8000f2e:	4b72      	ldr	r3, [pc, #456]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a71      	ldr	r2, [pc, #452]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	4b6f      	ldr	r3, [pc, #444]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a6e      	ldr	r2, [pc, #440]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	e00b      	b.n	8000f60 <HAL_RCC_OscConfig+0xd4>
 8000f48:	4b6b      	ldr	r3, [pc, #428]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a6a      	ldr	r2, [pc, #424]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b68      	ldr	r3, [pc, #416]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a67      	ldr	r2, [pc, #412]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d013      	beq.n	8000f90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f68:	f7ff fc86 	bl	8000878 <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f70:	f7ff fc82 	bl	8000878 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b64      	cmp	r3, #100	; 0x64
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e200      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f82:	4b5d      	ldr	r3, [pc, #372]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f0      	beq.n	8000f70 <HAL_RCC_OscConfig+0xe4>
 8000f8e:	e014      	b.n	8000fba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f90:	f7ff fc72 	bl	8000878 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f98:	f7ff fc6e 	bl	8000878 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b64      	cmp	r3, #100	; 0x64
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e1ec      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000faa:	4b53      	ldr	r3, [pc, #332]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f0      	bne.n	8000f98 <HAL_RCC_OscConfig+0x10c>
 8000fb6:	e000      	b.n	8000fba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d063      	beq.n	800108e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fc6:	4b4c      	ldr	r3, [pc, #304]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00b      	beq.n	8000fea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fd2:	4b49      	ldr	r3, [pc, #292]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
 8000fda:	2b08      	cmp	r3, #8
 8000fdc:	d11c      	bne.n	8001018 <HAL_RCC_OscConfig+0x18c>
 8000fde:	4b46      	ldr	r3, [pc, #280]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d116      	bne.n	8001018 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fea:	4b43      	ldr	r3, [pc, #268]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d005      	beq.n	8001002 <HAL_RCC_OscConfig+0x176>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d001      	beq.n	8001002 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e1c0      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001002:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	4939      	ldr	r1, [pc, #228]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001012:	4313      	orrs	r3, r2
 8001014:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001016:	e03a      	b.n	800108e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d020      	beq.n	8001062 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001020:	4b36      	ldr	r3, [pc, #216]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8001022:	2201      	movs	r2, #1
 8001024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001026:	f7ff fc27 	bl	8000878 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102e:	f7ff fc23 	bl	8000878 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e1a1      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104c:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4927      	ldr	r1, [pc, #156]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 800105c:	4313      	orrs	r3, r2
 800105e:	600b      	str	r3, [r1, #0]
 8001060:	e015      	b.n	800108e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fc06 	bl	8000878 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001070:	f7ff fc02 	bl	8000878 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e180      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	2b00      	cmp	r3, #0
 8001098:	d03a      	beq.n	8001110 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d019      	beq.n	80010d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_RCC_OscConfig+0x274>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a8:	f7ff fbe6 	bl	8000878 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b0:	f7ff fbe2 	bl	8000878 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e160      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f0      	beq.n	80010b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f000 fa9c 	bl	800160c <RCC_Delay>
 80010d4:	e01c      	b.n	8001110 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_RCC_OscConfig+0x274>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010dc:	f7ff fbcc 	bl	8000878 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e2:	e00f      	b.n	8001104 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e4:	f7ff fbc8 	bl	8000878 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d908      	bls.n	8001104 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e146      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000
 80010fc:	42420000 	.word	0x42420000
 8001100:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001104:	4b92      	ldr	r3, [pc, #584]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1e9      	bne.n	80010e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80a6 	beq.w	800126a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001122:	4b8b      	ldr	r3, [pc, #556]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10d      	bne.n	800114a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	4b88      	ldr	r3, [pc, #544]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	4a87      	ldr	r2, [pc, #540]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001138:	61d3      	str	r3, [r2, #28]
 800113a:	4b85      	ldr	r3, [pc, #532]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001146:	2301      	movs	r3, #1
 8001148:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114a:	4b82      	ldr	r3, [pc, #520]	; (8001354 <HAL_RCC_OscConfig+0x4c8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001152:	2b00      	cmp	r3, #0
 8001154:	d118      	bne.n	8001188 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001156:	4b7f      	ldr	r3, [pc, #508]	; (8001354 <HAL_RCC_OscConfig+0x4c8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a7e      	ldr	r2, [pc, #504]	; (8001354 <HAL_RCC_OscConfig+0x4c8>)
 800115c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001162:	f7ff fb89 	bl	8000878 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800116a:	f7ff fb85 	bl	8000878 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b64      	cmp	r3, #100	; 0x64
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e103      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117c:	4b75      	ldr	r3, [pc, #468]	; (8001354 <HAL_RCC_OscConfig+0x4c8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d106      	bne.n	800119e <HAL_RCC_OscConfig+0x312>
 8001190:	4b6f      	ldr	r3, [pc, #444]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	4a6e      	ldr	r2, [pc, #440]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6213      	str	r3, [r2, #32]
 800119c:	e02d      	b.n	80011fa <HAL_RCC_OscConfig+0x36e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x334>
 80011a6:	4b6a      	ldr	r3, [pc, #424]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	4a69      	ldr	r2, [pc, #420]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	f023 0301 	bic.w	r3, r3, #1
 80011b0:	6213      	str	r3, [r2, #32]
 80011b2:	4b67      	ldr	r3, [pc, #412]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	4a66      	ldr	r2, [pc, #408]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	f023 0304 	bic.w	r3, r3, #4
 80011bc:	6213      	str	r3, [r2, #32]
 80011be:	e01c      	b.n	80011fa <HAL_RCC_OscConfig+0x36e>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	2b05      	cmp	r3, #5
 80011c6:	d10c      	bne.n	80011e2 <HAL_RCC_OscConfig+0x356>
 80011c8:	4b61      	ldr	r3, [pc, #388]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	4a60      	ldr	r2, [pc, #384]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	6213      	str	r3, [r2, #32]
 80011d4:	4b5e      	ldr	r3, [pc, #376]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	4a5d      	ldr	r2, [pc, #372]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	6213      	str	r3, [r2, #32]
 80011e0:	e00b      	b.n	80011fa <HAL_RCC_OscConfig+0x36e>
 80011e2:	4b5b      	ldr	r3, [pc, #364]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	4a5a      	ldr	r2, [pc, #360]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	6213      	str	r3, [r2, #32]
 80011ee:	4b58      	ldr	r3, [pc, #352]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4a57      	ldr	r2, [pc, #348]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	f023 0304 	bic.w	r3, r3, #4
 80011f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d015      	beq.n	800122e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001202:	f7ff fb39 	bl	8000878 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001208:	e00a      	b.n	8001220 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800120a:	f7ff fb35 	bl	8000878 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	f241 3288 	movw	r2, #5000	; 0x1388
 8001218:	4293      	cmp	r3, r2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e0b1      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001220:	4b4b      	ldr	r3, [pc, #300]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0ee      	beq.n	800120a <HAL_RCC_OscConfig+0x37e>
 800122c:	e014      	b.n	8001258 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122e:	f7ff fb23 	bl	8000878 <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001234:	e00a      	b.n	800124c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001236:	f7ff fb1f 	bl	8000878 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	f241 3288 	movw	r2, #5000	; 0x1388
 8001244:	4293      	cmp	r3, r2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e09b      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800124c:	4b40      	ldr	r3, [pc, #256]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1ee      	bne.n	8001236 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d105      	bne.n	800126a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800125e:	4b3c      	ldr	r3, [pc, #240]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a3b      	ldr	r2, [pc, #236]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001268:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 8087 	beq.w	8001382 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001274:	4b36      	ldr	r3, [pc, #216]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 030c 	and.w	r3, r3, #12
 800127c:	2b08      	cmp	r3, #8
 800127e:	d061      	beq.n	8001344 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d146      	bne.n	8001316 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001288:	4b33      	ldr	r3, [pc, #204]	; (8001358 <HAL_RCC_OscConfig+0x4cc>)
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128e:	f7ff faf3 	bl	8000878 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001296:	f7ff faef 	bl	8000878 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e06d      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a8:	4b29      	ldr	r3, [pc, #164]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1f0      	bne.n	8001296 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012bc:	d108      	bne.n	80012d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012be:	4b24      	ldr	r3, [pc, #144]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	4921      	ldr	r1, [pc, #132]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012d0:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a19      	ldr	r1, [r3, #32]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	430b      	orrs	r3, r1
 80012e2:	491b      	ldr	r1, [pc, #108]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_RCC_OscConfig+0x4cc>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ee:	f7ff fac3 	bl	8000878 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f6:	f7ff fabf 	bl	8000878 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e03d      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0x46a>
 8001314:	e035      	b.n	8001382 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <HAL_RCC_OscConfig+0x4cc>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff faac 	bl	8000878 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff faa8 	bl	8000878 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e026      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x498>
 8001342:	e01e      	b.n	8001382 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d107      	bne.n	800135c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e019      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
 8001350:	40021000 	.word	0x40021000
 8001354:	40007000 	.word	0x40007000
 8001358:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_RCC_OscConfig+0x500>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	429a      	cmp	r2, r3
 800136e:	d106      	bne.n	800137e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800137a:	429a      	cmp	r2, r3
 800137c:	d001      	beq.n	8001382 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e0d0      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013a4:	4b6a      	ldr	r3, [pc, #424]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d910      	bls.n	80013d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b2:	4b67      	ldr	r3, [pc, #412]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 0207 	bic.w	r2, r3, #7
 80013ba:	4965      	ldr	r1, [pc, #404]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	4313      	orrs	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c2:	4b63      	ldr	r3, [pc, #396]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d001      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e0b8      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d020      	beq.n	8001422 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013ec:	4b59      	ldr	r3, [pc, #356]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	4a58      	ldr	r2, [pc, #352]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001404:	4b53      	ldr	r3, [pc, #332]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4a52      	ldr	r2, [pc, #328]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800140e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001410:	4b50      	ldr	r3, [pc, #320]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	494d      	ldr	r1, [pc, #308]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	4313      	orrs	r3, r2
 8001420:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d040      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d107      	bne.n	8001446 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	4b47      	ldr	r3, [pc, #284]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d115      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e07f      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d107      	bne.n	800145e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144e:	4b41      	ldr	r3, [pc, #260]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d109      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e073      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145e:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e06b      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800146e:	4b39      	ldr	r3, [pc, #228]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f023 0203 	bic.w	r2, r3, #3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4936      	ldr	r1, [pc, #216]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001480:	f7ff f9fa 	bl	8000878 <HAL_GetTick>
 8001484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001486:	e00a      	b.n	800149e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001488:	f7ff f9f6 	bl	8000878 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f241 3288 	movw	r2, #5000	; 0x1388
 8001496:	4293      	cmp	r3, r2
 8001498:	d901      	bls.n	800149e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e053      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149e:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 020c 	and.w	r2, r3, #12
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d1eb      	bne.n	8001488 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d210      	bcs.n	80014e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014be:	4b24      	ldr	r3, [pc, #144]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 0207 	bic.w	r2, r3, #7
 80014c6:	4922      	ldr	r1, [pc, #136]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d001      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e032      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d008      	beq.n	80014fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	4916      	ldr	r1, [pc, #88]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d009      	beq.n	800151e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	490e      	ldr	r1, [pc, #56]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800151e:	f000 f821 	bl	8001564 <HAL_RCC_GetSysClockFreq>
 8001522:	4602      	mov	r2, r0
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	490a      	ldr	r1, [pc, #40]	; (8001558 <HAL_RCC_ClockConfig+0x1c8>)
 8001530:	5ccb      	ldrb	r3, [r1, r3]
 8001532:	fa22 f303 	lsr.w	r3, r2, r3
 8001536:	4a09      	ldr	r2, [pc, #36]	; (800155c <HAL_RCC_ClockConfig+0x1cc>)
 8001538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_RCC_ClockConfig+0x1d0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f958 	bl	80007f4 <HAL_InitTick>

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40022000 	.word	0x40022000
 8001554:	40021000 	.word	0x40021000
 8001558:	08002d48 	.word	0x08002d48
 800155c:	20000000 	.word	0x20000000
 8001560:	20000004 	.word	0x20000004

08001564 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b087      	sub	sp, #28
 8001568:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800157e:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b04      	cmp	r3, #4
 800158c:	d002      	beq.n	8001594 <HAL_RCC_GetSysClockFreq+0x30>
 800158e:	2b08      	cmp	r3, #8
 8001590:	d003      	beq.n	800159a <HAL_RCC_GetSysClockFreq+0x36>
 8001592:	e027      	b.n	80015e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_RCC_GetSysClockFreq+0x98>)
 8001596:	613b      	str	r3, [r7, #16]
      break;
 8001598:	e027      	b.n	80015ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	0c9b      	lsrs	r3, r3, #18
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	4a17      	ldr	r2, [pc, #92]	; (8001600 <HAL_RCC_GetSysClockFreq+0x9c>)
 80015a4:	5cd3      	ldrb	r3, [r2, r3]
 80015a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d010      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	0c5b      	lsrs	r3, r3, #17
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	4a11      	ldr	r2, [pc, #68]	; (8001604 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015be:	5cd3      	ldrb	r3, [r2, r3]
 80015c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <HAL_RCC_GetSysClockFreq+0x98>)
 80015c6:	fb03 f202 	mul.w	r2, r3, r2
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	e004      	b.n	80015de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a0c      	ldr	r2, [pc, #48]	; (8001608 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015d8:	fb02 f303 	mul.w	r3, r2, r3
 80015dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	613b      	str	r3, [r7, #16]
      break;
 80015e2:	e002      	b.n	80015ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_RCC_GetSysClockFreq+0x98>)
 80015e6:	613b      	str	r3, [r7, #16]
      break;
 80015e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015ea:	693b      	ldr	r3, [r7, #16]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	371c      	adds	r7, #28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	007a1200 	.word	0x007a1200
 8001600:	08002d58 	.word	0x08002d58
 8001604:	08002d68 	.word	0x08002d68
 8001608:	003d0900 	.word	0x003d0900

0800160c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <RCC_Delay+0x34>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <RCC_Delay+0x38>)
 800161a:	fba2 2303 	umull	r2, r3, r2, r3
 800161e:	0a5b      	lsrs	r3, r3, #9
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	fb02 f303 	mul.w	r3, r2, r3
 8001626:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001628:	bf00      	nop
  }
  while (Delay --);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1e5a      	subs	r2, r3, #1
 800162e:	60fa      	str	r2, [r7, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f9      	bne.n	8001628 <RCC_Delay+0x1c>
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	20000000 	.word	0x20000000
 8001644:	10624dd3 	.word	0x10624dd3

08001648 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e076      	b.n	8001748 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	2b00      	cmp	r3, #0
 8001660:	d108      	bne.n	8001674 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800166a:	d009      	beq.n	8001680 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
 8001672:	e005      	b.n	8001680 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d106      	bne.n	80016a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7fe ffba 	bl	8000614 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2202      	movs	r2, #2
 80016a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80016c8:	431a      	orrs	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001704:	ea42 0103 	orr.w	r1, r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	0c1a      	lsrs	r2, r3, #16
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f002 0204 	and.w	r2, r2, #4
 8001726:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	69da      	ldr	r2, [r3, #28]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001736:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	4613      	mov	r3, r2
 800175e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800176a:	2b01      	cmp	r3, #1
 800176c:	d101      	bne.n	8001772 <HAL_SPI_Transmit+0x22>
 800176e:	2302      	movs	r3, #2
 8001770:	e12d      	b.n	80019ce <HAL_SPI_Transmit+0x27e>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800177a:	f7ff f87d 	bl	8000878 <HAL_GetTick>
 800177e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b01      	cmp	r3, #1
 800178e:	d002      	beq.n	8001796 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001790:	2302      	movs	r3, #2
 8001792:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001794:	e116      	b.n	80019c4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <HAL_SPI_Transmit+0x52>
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80017a6:	e10d      	b.n	80019c4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2203      	movs	r2, #3
 80017ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2200      	movs	r2, #0
 80017b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	88fa      	ldrh	r2, [r7, #6]
 80017c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	88fa      	ldrh	r2, [r7, #6]
 80017c6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017ee:	d10f      	bne.n	8001810 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800180e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181a:	2b40      	cmp	r3, #64	; 0x40
 800181c:	d007      	beq.n	800182e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800182c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001836:	d14f      	bne.n	80018d8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d002      	beq.n	8001846 <HAL_SPI_Transmit+0xf6>
 8001840:	8afb      	ldrh	r3, [r7, #22]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d142      	bne.n	80018cc <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	881a      	ldrh	r2, [r3, #0]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	1c9a      	adds	r2, r3, #2
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001860:	b29b      	uxth	r3, r3
 8001862:	3b01      	subs	r3, #1
 8001864:	b29a      	uxth	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800186a:	e02f      	b.n	80018cc <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b02      	cmp	r3, #2
 8001878:	d112      	bne.n	80018a0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	881a      	ldrh	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	1c9a      	adds	r2, r3, #2
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001894:	b29b      	uxth	r3, r3
 8001896:	3b01      	subs	r3, #1
 8001898:	b29a      	uxth	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	86da      	strh	r2, [r3, #54]	; 0x36
 800189e:	e015      	b.n	80018cc <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80018a0:	f7fe ffea 	bl	8000878 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d803      	bhi.n	80018b8 <HAL_SPI_Transmit+0x168>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b6:	d102      	bne.n	80018be <HAL_SPI_Transmit+0x16e>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d106      	bne.n	80018cc <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80018ca:	e07b      	b.n	80019c4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1ca      	bne.n	800186c <HAL_SPI_Transmit+0x11c>
 80018d6:	e050      	b.n	800197a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <HAL_SPI_Transmit+0x196>
 80018e0:	8afb      	ldrh	r3, [r7, #22]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d144      	bne.n	8001970 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	330c      	adds	r3, #12
 80018f0:	7812      	ldrb	r2, [r2, #0]
 80018f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001902:	b29b      	uxth	r3, r3
 8001904:	3b01      	subs	r3, #1
 8001906:	b29a      	uxth	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800190c:	e030      	b.n	8001970 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b02      	cmp	r3, #2
 800191a:	d113      	bne.n	8001944 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	330c      	adds	r3, #12
 8001926:	7812      	ldrb	r2, [r2, #0]
 8001928:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001938:	b29b      	uxth	r3, r3
 800193a:	3b01      	subs	r3, #1
 800193c:	b29a      	uxth	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	86da      	strh	r2, [r3, #54]	; 0x36
 8001942:	e015      	b.n	8001970 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001944:	f7fe ff98 	bl	8000878 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d803      	bhi.n	800195c <HAL_SPI_Transmit+0x20c>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195a:	d102      	bne.n	8001962 <HAL_SPI_Transmit+0x212>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d106      	bne.n	8001970 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800196e:	e029      	b.n	80019c4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001974:	b29b      	uxth	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1c9      	bne.n	800190e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	6839      	ldr	r1, [r7, #0]
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 fbd8 	bl	8002134 <SPI_EndRxTxTransaction>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2220      	movs	r2, #32
 800198e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10a      	bne.n	80019ae <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	77fb      	strb	r3, [r7, #31]
 80019ba:	e003      	b.n	80019c4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80019cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3720      	adds	r7, #32
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b088      	sub	sp, #32
 80019da:	af02      	add	r7, sp, #8
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	4613      	mov	r3, r2
 80019e4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d002      	beq.n	80019fc <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80019f6:	2302      	movs	r3, #2
 80019f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80019fa:	e0fb      	b.n	8001bf4 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a04:	d112      	bne.n	8001a2c <HAL_SPI_Receive+0x56>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10e      	bne.n	8001a2c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2204      	movs	r2, #4
 8001a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001a16:	88fa      	ldrh	r2, [r7, #6]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 f8ef 	bl	8001c06 <HAL_SPI_TransmitReceive>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	e0e8      	b.n	8001bfe <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <HAL_SPI_Receive+0x64>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e0e1      	b.n	8001bfe <HAL_SPI_Receive+0x228>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a42:	f7fe ff19 	bl	8000878 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <HAL_SPI_Receive+0x7e>
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001a58:	e0cc      	b.n	8001bf4 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	88fa      	ldrh	r2, [r7, #6]
 8001a72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	88fa      	ldrh	r2, [r7, #6]
 8001a78:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aa0:	d10f      	bne.n	8001ac2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ab0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ac0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001acc:	2b40      	cmp	r3, #64	; 0x40
 8001ace:	d007      	beq.n	8001ae0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ade:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d16a      	bne.n	8001bbe <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001ae8:	e032      	b.n	8001b50 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d115      	bne.n	8001b24 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f103 020c 	add.w	r2, r3, #12
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b04:	7812      	ldrb	r2, [r2, #0]
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b22:	e015      	b.n	8001b50 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b24:	f7fe fea8 	bl	8000878 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d803      	bhi.n	8001b3c <HAL_SPI_Receive+0x166>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3a:	d102      	bne.n	8001b42 <HAL_SPI_Receive+0x16c>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d106      	bne.n	8001b50 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001b4e:	e051      	b.n	8001bf4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1c7      	bne.n	8001aea <HAL_SPI_Receive+0x114>
 8001b5a:	e035      	b.n	8001bc8 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d113      	bne.n	8001b92 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b74:	b292      	uxth	r2, r2
 8001b76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7c:	1c9a      	adds	r2, r3, #2
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b90:	e015      	b.n	8001bbe <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b92:	f7fe fe71 	bl	8000878 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d803      	bhi.n	8001baa <HAL_SPI_Receive+0x1d4>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba8:	d102      	bne.n	8001bb0 <HAL_SPI_Receive+0x1da>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d106      	bne.n	8001bbe <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001bbc:	e01a      	b.n	8001bf4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1c9      	bne.n	8001b5c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	6839      	ldr	r1, [r7, #0]
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f000 fa5f 	bl	8002090 <SPI_EndRxTransaction>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	75fb      	strb	r3, [r7, #23]
 8001bea:	e003      	b.n	8001bf4 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b08c      	sub	sp, #48	; 0x30
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001c14:	2301      	movs	r3, #1
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_SPI_TransmitReceive+0x26>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e198      	b.n	8001f5e <HAL_SPI_TransmitReceive+0x358>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c34:	f7fe fe20 	bl	8000878 <HAL_GetTick>
 8001c38:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001c4a:	887b      	ldrh	r3, [r7, #2]
 8001c4c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001c4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d00f      	beq.n	8001c76 <HAL_SPI_TransmitReceive+0x70>
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c5c:	d107      	bne.n	8001c6e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d103      	bne.n	8001c6e <HAL_SPI_TransmitReceive+0x68>
 8001c66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d003      	beq.n	8001c76 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001c74:	e16d      	b.n	8001f52 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_SPI_TransmitReceive+0x82>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <HAL_SPI_TransmitReceive+0x82>
 8001c82:	887b      	ldrh	r3, [r7, #2]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d103      	bne.n	8001c90 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001c8e:	e160      	b.n	8001f52 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d003      	beq.n	8001ca4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2205      	movs	r2, #5
 8001ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	887a      	ldrh	r2, [r7, #2]
 8001cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	887a      	ldrh	r2, [r7, #2]
 8001cba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	887a      	ldrh	r2, [r7, #2]
 8001cc6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce4:	2b40      	cmp	r3, #64	; 0x40
 8001ce6:	d007      	beq.n	8001cf8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cf6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d00:	d17c      	bne.n	8001dfc <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <HAL_SPI_TransmitReceive+0x10a>
 8001d0a:	8b7b      	ldrh	r3, [r7, #26]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d16a      	bne.n	8001de6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	881a      	ldrh	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	1c9a      	adds	r2, r3, #2
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d34:	e057      	b.n	8001de6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d11b      	bne.n	8001d7c <HAL_SPI_TransmitReceive+0x176>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d016      	beq.n	8001d7c <HAL_SPI_TransmitReceive+0x176>
 8001d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d113      	bne.n	8001d7c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	881a      	ldrh	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	1c9a      	adds	r2, r3, #2
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d119      	bne.n	8001dbe <HAL_SPI_TransmitReceive+0x1b8>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d014      	beq.n	8001dbe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9e:	b292      	uxth	r2, r2
 8001da0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da6:	1c9a      	adds	r2, r3, #2
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001dbe:	f7fe fd5b 	bl	8000878 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d80b      	bhi.n	8001de6 <HAL_SPI_TransmitReceive+0x1e0>
 8001dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd4:	d007      	beq.n	8001de6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8001de4:	e0b5      	b.n	8001f52 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1a2      	bne.n	8001d36 <HAL_SPI_TransmitReceive+0x130>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d19d      	bne.n	8001d36 <HAL_SPI_TransmitReceive+0x130>
 8001dfa:	e080      	b.n	8001efe <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <HAL_SPI_TransmitReceive+0x204>
 8001e04:	8b7b      	ldrh	r3, [r7, #26]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d16f      	bne.n	8001eea <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	330c      	adds	r3, #12
 8001e14:	7812      	ldrb	r2, [r2, #0]
 8001e16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e30:	e05b      	b.n	8001eea <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d11c      	bne.n	8001e7a <HAL_SPI_TransmitReceive+0x274>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d017      	beq.n	8001e7a <HAL_SPI_TransmitReceive+0x274>
 8001e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d114      	bne.n	8001e7a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	330c      	adds	r3, #12
 8001e5a:	7812      	ldrb	r2, [r2, #0]
 8001e5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d119      	bne.n	8001ebc <HAL_SPI_TransmitReceive+0x2b6>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d014      	beq.n	8001ebc <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001ebc:	f7fe fcdc 	bl	8000878 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d803      	bhi.n	8001ed4 <HAL_SPI_TransmitReceive+0x2ce>
 8001ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed2:	d102      	bne.n	8001eda <HAL_SPI_TransmitReceive+0x2d4>
 8001ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d107      	bne.n	8001eea <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8001ee8:	e033      	b.n	8001f52 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d19e      	bne.n	8001e32 <HAL_SPI_TransmitReceive+0x22c>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d199      	bne.n	8001e32 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 f916 	bl	8002134 <SPI_EndRxTxTransaction>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d006      	beq.n	8001f1c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2220      	movs	r2, #32
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001f1a:	e01a      	b.n	8001f52 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10a      	bne.n	8001f3a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001f48:	e003      	b.n	8001f52 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3730      	adds	r7, #48	; 0x30
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f74:	b2db      	uxtb	r3, r3
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001f90:	f7fe fc72 	bl	8000878 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001fa0:	f7fe fc6a 	bl	8000878 <HAL_GetTick>
 8001fa4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001fa6:	4b39      	ldr	r3, [pc, #228]	; (800208c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	015b      	lsls	r3, r3, #5
 8001fac:	0d1b      	lsrs	r3, r3, #20
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	fb02 f303 	mul.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fb6:	e054      	b.n	8002062 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbe:	d050      	beq.n	8002062 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001fc0:	f7fe fc5a 	bl	8000878 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	69fa      	ldr	r2, [r7, #28]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d902      	bls.n	8001fd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d13d      	bne.n	8002052 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001fe4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fee:	d111      	bne.n	8002014 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ff8:	d004      	beq.n	8002004 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002002:	d107      	bne.n	8002014 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002012:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800201c:	d10f      	bne.n	800203e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800203c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e017      	b.n	8002082 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	3b01      	subs	r3, #1
 8002060:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	4013      	ands	r3, r2
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	429a      	cmp	r2, r3
 8002070:	bf0c      	ite	eq
 8002072:	2301      	moveq	r3, #1
 8002074:	2300      	movne	r3, #0
 8002076:	b2db      	uxtb	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	429a      	cmp	r2, r3
 800207e:	d19b      	bne.n	8001fb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3720      	adds	r7, #32
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000000 	.word	0x20000000

08002090 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af02      	add	r7, sp, #8
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020a4:	d111      	bne.n	80020ca <SPI_EndRxTransaction+0x3a>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ae:	d004      	beq.n	80020ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b8:	d107      	bne.n	80020ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020c8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020d2:	d117      	bne.n	8002104 <SPI_EndRxTransaction+0x74>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020dc:	d112      	bne.n	8002104 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2200      	movs	r2, #0
 80020e6:	2101      	movs	r1, #1
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f7ff ff49 	bl	8001f80 <SPI_WaitFlagStateUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d01a      	beq.n	800212a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	f043 0220 	orr.w	r2, r3, #32
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e013      	b.n	800212c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2200      	movs	r2, #0
 800210c:	2180      	movs	r1, #128	; 0x80
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f7ff ff36 	bl	8001f80 <SPI_WaitFlagStateUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d007      	beq.n	800212a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211e:	f043 0220 	orr.w	r2, r3, #32
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e000      	b.n	800212c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af02      	add	r7, sp, #8
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2200      	movs	r2, #0
 8002148:	2180      	movs	r1, #128	; 0x80
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f7ff ff18 	bl	8001f80 <SPI_WaitFlagStateUntilTimeout>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d007      	beq.n	8002166 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215a:	f043 0220 	orr.w	r2, r3, #32
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e000      	b.n	8002168 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6898      	ldr	r0, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	899b      	ldrh	r3, [r3, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	4619      	mov	r1, r3
 8002184:	f7fe fe38 	bl	8000df8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002188:	2001      	movs	r0, #1
 800218a:	f7fe fb7f 	bl	800088c <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6898      	ldr	r0, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	899b      	ldrh	r3, [r3, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	4619      	mov	r1, r3
 800219a:	f7fe fe2d 	bl	8000df8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800219e:	2064      	movs	r0, #100	; 0x64
 80021a0:	f7fe fb74 	bl	800088c <HAL_Delay>
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 80021b6:	2101      	movs	r1, #1
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f9a0 	bl	80024fe <LoRa_read>
 80021be:	4603      	mov	r3, r0
 80021c0:	73bb      	strb	r3, [r7, #14]
	data = read;
 80021c2:	7bbb      	ldrb	r3, [r7, #14]
 80021c4:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d107      	bne.n	80021dc <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80021cc:	7bbb      	ldrb	r3, [r7, #14]
 80021ce:	f023 0307 	bic.w	r3, r3, #7
 80021d2:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	61da      	str	r2, [r3, #28]
 80021da:	e03e      	b.n	800225a <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d10c      	bne.n	80021fc <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80021e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021e6:	f023 0307 	bic.w	r3, r3, #7
 80021ea:	b25b      	sxtb	r3, r3
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	b25b      	sxtb	r3, r3
 80021f2:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	61da      	str	r2, [r3, #28]
 80021fa:	e02e      	b.n	800225a <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d10c      	bne.n	800221c <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8002202:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002206:	f023 0307 	bic.w	r3, r3, #7
 800220a:	b25b      	sxtb	r3, r3
 800220c:	f043 0303 	orr.w	r3, r3, #3
 8002210:	b25b      	sxtb	r3, r3
 8002212:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2203      	movs	r2, #3
 8002218:	61da      	str	r2, [r3, #28]
 800221a:	e01e      	b.n	800225a <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2b05      	cmp	r3, #5
 8002220:	d10c      	bne.n	800223c <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8002222:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002226:	f023 0307 	bic.w	r3, r3, #7
 800222a:	b25b      	sxtb	r3, r3
 800222c:	f043 0305 	orr.w	r3, r3, #5
 8002230:	b25b      	sxtb	r3, r3
 8002232:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2205      	movs	r2, #5
 8002238:	61da      	str	r2, [r3, #28]
 800223a:	e00e      	b.n	800225a <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2b06      	cmp	r3, #6
 8002240:	d10b      	bne.n	800225a <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8002242:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002246:	f023 0307 	bic.w	r3, r3, #7
 800224a:	b25b      	sxtb	r3, r3
 800224c:	f043 0306 	orr.w	r3, r3, #6
 8002250:	b25b      	sxtb	r3, r3
 8002252:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2206      	movs	r2, #6
 8002258:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	461a      	mov	r2, r3
 800225e:	2101      	movs	r1, #1
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f966 	bl	8002532 <LoRa_write>
	//HAL_Delay(10);
}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	603b      	str	r3, [r7, #0]
 800227a:	4613      	mov	r3, r2
 800227c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	889b      	ldrh	r3, [r3, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	4619      	mov	r1, r3
 800228a:	f7fe fdb5 	bl	8000df8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6998      	ldr	r0, [r3, #24]
 8002292:	88fa      	ldrh	r2, [r7, #6]
 8002294:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	f7ff fa59 	bl	8001750 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800229e:	bf00      	nop
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fe5e 	bl	8001f66 <HAL_SPI_GetState>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d1f7      	bne.n	80022a0 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6998      	ldr	r0, [r3, #24]
 80022b4:	8b3a      	ldrh	r2, [r7, #24]
 80022b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80022ba:	6839      	ldr	r1, [r7, #0]
 80022bc:	f7ff fb8b 	bl	80019d6 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80022c0:	bf00      	nop
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fe4d 	bl	8001f66 <HAL_SPI_GetState>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d1f7      	bne.n	80022c2 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	889b      	ldrh	r3, [r3, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	4619      	mov	r1, r3
 80022de:	f7fe fd8b 	bl	8000df8 <HAL_GPIO_WritePin>
}
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	4613      	mov	r3, r2
 80022f8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	889b      	ldrh	r3, [r3, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	4619      	mov	r1, r3
 8002306:	f7fe fd77 	bl	8000df8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6998      	ldr	r0, [r3, #24]
 800230e:	88fa      	ldrh	r2, [r7, #6]
 8002310:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	f7ff fa1b 	bl	8001750 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800231a:	bf00      	nop
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fe20 	bl	8001f66 <HAL_SPI_GetState>
 8002326:	4603      	mov	r3, r0
 8002328:	2b01      	cmp	r3, #1
 800232a:	d1f7      	bne.n	800231c <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6998      	ldr	r0, [r3, #24]
 8002330:	8b3a      	ldrh	r2, [r7, #24]
 8002332:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002336:	6839      	ldr	r1, [r7, #0]
 8002338:	f7ff fa0a 	bl	8001750 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800233c:	bf00      	nop
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fe0f 	bl	8001f66 <HAL_SPI_GetState>
 8002348:	4603      	mov	r3, r0
 800234a:	2b01      	cmp	r3, #1
 800234c:	d1f7      	bne.n	800233e <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	889b      	ldrh	r3, [r3, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	4619      	mov	r1, r3
 800235a:	f7fe fd4d 	bl	8000df8 <HAL_GPIO_WritePin>
}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5; /// divided by 2^5 --- 534288 = 2^19
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	04db      	lsls	r3, r3, #19
 8002374:	115b      	asrs	r3, r3, #5
 8002376:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	0c1b      	lsrs	r3, r3, #16
 800237c:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800237e:	7afb      	ldrb	r3, [r7, #11]
 8002380:	461a      	mov	r2, r3
 8002382:	2106      	movs	r1, #6
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f8d4 	bl	8002532 <LoRa_write>
	HAL_Delay(5);
 800238a:	2005      	movs	r0, #5
 800238c:	f7fe fa7e 	bl	800088c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	0a1b      	lsrs	r3, r3, #8
 8002394:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8002396:	7afb      	ldrb	r3, [r7, #11]
 8002398:	461a      	mov	r2, r3
 800239a:	2107      	movs	r1, #7
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f8c8 	bl	8002532 <LoRa_write>
	HAL_Delay(5);
 80023a2:	2005      	movs	r0, #5
 80023a4:	f7fe fa72 	bl	800088c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80023ac:	7afb      	ldrb	r3, [r7, #11]
 80023ae:	461a      	mov	r2, r3
 80023b0:	2108      	movs	r1, #8
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f8bd 	bl	8002532 <LoRa_write>
	HAL_Delay(5);
 80023b8:	2005      	movs	r0, #5
 80023ba:	f7fe fa67 	bl	800088c <HAL_Delay>
}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b084      	sub	sp, #16
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	2b0c      	cmp	r3, #12
 80023d4:	dd01      	ble.n	80023da <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80023d6:	230c      	movs	r3, #12
 80023d8:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b06      	cmp	r3, #6
 80023de:	dc01      	bgt.n	80023e4 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80023e0:	2307      	movs	r3, #7
 80023e2:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80023e4:	211e      	movs	r1, #30
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f889 	bl	80024fe <LoRa_read>
 80023ec:	4603      	mov	r3, r0
 80023ee:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80023f0:	200a      	movs	r0, #10
 80023f2:	f7fe fa4b 	bl	800088c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	b2db      	uxtb	r3, r3
 8002406:	4413      	add	r3, r2
 8002408:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 800240a:	7bbb      	ldrb	r3, [r7, #14]
 800240c:	461a      	mov	r2, r3
 800240e:	211e      	movs	r1, #30
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f88e 	bl	8002532 <LoRa_write>
	HAL_Delay(10);
 8002416:	200a      	movs	r0, #10
 8002418:	f7fe fa38 	bl	800088c <HAL_Delay>
}
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	461a      	mov	r2, r3
 8002434:	2109      	movs	r1, #9
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f87b 	bl	8002532 <LoRa_write>
	HAL_Delay(10);
 800243c:	200a      	movs	r0, #10
 800243e:	f7fe fa25 	bl	800088c <HAL_Delay>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	2b2c      	cmp	r3, #44	; 0x2c
 8002460:	d801      	bhi.n	8002466 <LoRa_setOCP+0x1a>
		current = 45;
 8002462:	232d      	movs	r3, #45	; 0x2d
 8002464:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	2bf0      	cmp	r3, #240	; 0xf0
 800246a:	d901      	bls.n	8002470 <LoRa_setOCP+0x24>
		current = 240;
 800246c:	23f0      	movs	r3, #240	; 0xf0
 800246e:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	2b78      	cmp	r3, #120	; 0x78
 8002474:	d809      	bhi.n	800248a <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	3b2d      	subs	r3, #45	; 0x2d
 800247a:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <LoRa_setOCP+0x78>)
 800247c:	fb82 1203 	smull	r1, r2, r2, r3
 8002480:	1052      	asrs	r2, r2, #1
 8002482:	17db      	asrs	r3, r3, #31
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	73fb      	strb	r3, [r7, #15]
 8002488:	e00b      	b.n	80024a2 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	2bf0      	cmp	r3, #240	; 0xf0
 800248e:	d808      	bhi.n	80024a2 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	331e      	adds	r3, #30
 8002494:	4a0b      	ldr	r2, [pc, #44]	; (80024c4 <LoRa_setOCP+0x78>)
 8002496:	fb82 1203 	smull	r1, r2, r2, r3
 800249a:	1092      	asrs	r2, r2, #2
 800249c:	17db      	asrs	r3, r3, #31
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	3320      	adds	r3, #32
 80024a6:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	461a      	mov	r2, r3
 80024ac:	210b      	movs	r1, #11
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f83f 	bl	8002532 <LoRa_write>
	HAL_Delay(10);
 80024b4:	200a      	movs	r0, #10
 80024b6:	f7fe f9e9 	bl	800088c <HAL_Delay>
}
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	66666667 	.word	0x66666667

080024c8 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80024d0:	211e      	movs	r1, #30
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f813 	bl	80024fe <LoRa_read>
 80024d8:	4603      	mov	r3, r0
 80024da:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	f043 0307 	orr.w	r3, r3, #7
 80024e2:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80024e4:	7bbb      	ldrb	r3, [r7, #14]
 80024e6:	461a      	mov	r2, r3
 80024e8:	211e      	movs	r1, #30
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f821 	bl	8002532 <LoRa_write>
	HAL_Delay(10);
 80024f0:	200a      	movs	r0, #10
 80024f2:	f7fe f9cb 	bl	800088c <HAL_Delay>
}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af02      	add	r7, sp, #8
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	460b      	mov	r3, r1
 8002508:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800250a:	78fb      	ldrb	r3, [r7, #3]
 800250c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002510:	b2db      	uxtb	r3, r3
 8002512:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8002514:	f107 030f 	add.w	r3, r7, #15
 8002518:	f107 010e 	add.w	r1, r7, #14
 800251c:	2201      	movs	r2, #1
 800251e:	9200      	str	r2, [sp, #0]
 8002520:	2201      	movs	r2, #1
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff fea3 	bl	800226e <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8002528:	7bfb      	ldrb	r3, [r7, #15]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af02      	add	r7, sp, #8
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	460b      	mov	r3, r1
 800253c:	70fb      	strb	r3, [r7, #3]
 800253e:	4613      	mov	r3, r2
 8002540:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002548:	b2db      	uxtb	r3, r3
 800254a:	73bb      	strb	r3, [r7, #14]
	data = value;
 800254c:	78bb      	ldrb	r3, [r7, #2]
 800254e:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8002550:	f107 030f 	add.w	r3, r7, #15
 8002554:	f107 010e 	add.w	r1, r7, #14
 8002558:	2201      	movs	r2, #1
 800255a:	9200      	str	r2, [sp, #0]
 800255c:	2201      	movs	r2, #1
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff fec3 	bl	80022ea <LoRa_writeReg>
	//HAL_Delay(5);
}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	461a      	mov	r2, r3
 8002578:	460b      	mov	r3, r1
 800257a:	72fb      	strb	r3, [r7, #11]
 800257c:	4613      	mov	r3, r2
 800257e:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8002580:	7afb      	ldrb	r3, [r7, #11]
 8002582:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002586:	b2db      	uxtb	r3, r3
 8002588:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	889b      	ldrh	r3, [r3, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	4619      	mov	r1, r3
 8002596:	f7fe fc2f 	bl	8000df8 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6998      	ldr	r0, [r3, #24]
 800259e:	f107 0117 	add.w	r1, r7, #23
 80025a2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80025a6:	2201      	movs	r2, #1
 80025a8:	f7ff f8d2 	bl	8001750 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80025ac:	bf00      	nop
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fcd7 	bl	8001f66 <HAL_SPI_GetState>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d1f7      	bne.n	80025ae <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6998      	ldr	r0, [r3, #24]
 80025c2:	7abb      	ldrb	r3, [r7, #10]
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	f7ff f8c0 	bl	8001750 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80025d0:	bf00      	nop
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fcc5 	bl	8001f66 <HAL_SPI_GetState>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d1f7      	bne.n	80025d2 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	889b      	ldrh	r3, [r3, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	4619      	mov	r1, r3
 80025ee:	f7fe fc03 	bl	8000df8 <HAL_GPIO_WritePin>
}
 80025f2:	bf00      	nop
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]

	return 1;
 8002602:	2301      	movs	r3, #1
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	4611      	mov	r1, r2
 800261a:	461a      	mov	r2, r3
 800261c:	460b      	mov	r3, r1
 800261e:	71fb      	strb	r3, [r7, #7]
 8002620:	4613      	mov	r3, r2
 8002622:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800262a:	2101      	movs	r1, #1
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7ff fdbd 	bl	80021ac <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8002632:	210e      	movs	r1, #14
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f7ff ff62 	bl	80024fe <LoRa_read>
 800263a:	4603      	mov	r3, r0
 800263c:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800263e:	7cfb      	ldrb	r3, [r7, #19]
 8002640:	461a      	mov	r2, r3
 8002642:	210d      	movs	r1, #13
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f7ff ff74 	bl	8002532 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	461a      	mov	r2, r3
 800264e:	2122      	movs	r1, #34	; 0x22
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f7ff ff6e 	bl	8002532 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	2100      	movs	r1, #0
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f7ff ff85 	bl	800256c <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8002662:	2103      	movs	r1, #3
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f7ff fda1 	bl	80021ac <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 800266a:	2112      	movs	r1, #18
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f7ff ff46 	bl	80024fe <LoRa_read>
 8002672:	4603      	mov	r3, r0
 8002674:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8002676:	7cfb      	ldrb	r3, [r7, #19]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00a      	beq.n	8002696 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8002680:	22ff      	movs	r2, #255	; 0xff
 8002682:	2112      	movs	r1, #18
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f7ff ff54 	bl	8002532 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 800268a:	6979      	ldr	r1, [r7, #20]
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f7ff fd8d 	bl	80021ac <LoRa_gotoMode>
			return 1;
 8002692:	2301      	movs	r3, #1
 8002694:	e00f      	b.n	80026b6 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8002696:	88bb      	ldrh	r3, [r7, #4]
 8002698:	3b01      	subs	r3, #1
 800269a:	80bb      	strh	r3, [r7, #4]
 800269c:	88bb      	ldrh	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d105      	bne.n	80026ae <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 80026a2:	6979      	ldr	r1, [r7, #20]
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f7ff fd81 	bl	80021ac <LoRa_gotoMode>
				return 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e003      	b.n	80026b6 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 80026ae:	2001      	movs	r0, #1
 80026b0:	f7fe f8ec 	bl	800088c <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80026b4:	e7d9      	b.n	800266a <LoRa_transmit+0x5c>
	}
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80026c6:	2105      	movs	r1, #5
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff fd6f 	bl	80021ac <LoRa_gotoMode>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length_max){
 80026d6:	b590      	push	{r4, r7, lr}
 80026d8:	b089      	sub	sp, #36	; 0x24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	4613      	mov	r3, r2
 80026e2:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	77fb      	strb	r3, [r7, #31]

//	for(int i=0; i<length; i++)
//		data[i]=0;

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80026e8:	2101      	movs	r1, #1
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f7ff fd5e 	bl	80021ac <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80026f0:	2112      	movs	r1, #18
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f7ff ff03 	bl	80024fe <LoRa_read>
 80026f8:	4603      	mov	r3, r0
 80026fa:	75fb      	strb	r3, [r7, #23]
	if((read & 0x40) != 0){
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
 80026fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002702:	2b00      	cmp	r3, #0
 8002704:	d036      	beq.n	8002774 <LoRa_receive+0x9e>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8002706:	22ff      	movs	r2, #255	; 0xff
 8002708:	2112      	movs	r1, #18
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f7ff ff11 	bl	8002532 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8002710:	2113      	movs	r1, #19
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f7ff fef3 	bl	80024fe <LoRa_read>
 8002718:	4603      	mov	r3, r0
 800271a:	75bb      	strb	r3, [r7, #22]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 800271c:	2110      	movs	r1, #16
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f7ff feed 	bl	80024fe <LoRa_read>
 8002724:	4603      	mov	r3, r0
 8002726:	75fb      	strb	r3, [r7, #23]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8002728:	7dfb      	ldrb	r3, [r7, #23]
 800272a:	461a      	mov	r2, r3
 800272c:	210d      	movs	r1, #13
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f7ff feff 	bl	8002532 <LoRa_write>
		min = length_max >= number_of_bytes ? number_of_bytes : length_max;
 8002734:	7dba      	ldrb	r2, [r7, #22]
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	4293      	cmp	r3, r2
 800273a:	bf28      	it	cs
 800273c:	4613      	movcs	r3, r2
 800273e:	77fb      	strb	r3, [r7, #31]
		data = (uint8_t*)calloc(min,sizeof(uint8_t));
 8002740:	7ffb      	ldrb	r3, [r7, #31]
 8002742:	2101      	movs	r1, #1
 8002744:	4618      	mov	r0, r3
 8002746:	f000 f8c7 	bl	80028d8 <calloc>
 800274a:	4603      	mov	r3, r0
 800274c:	60bb      	str	r3, [r7, #8]
		for(int i=0; i<min; i++)
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	e00b      	b.n	800276c <LoRa_receive+0x96>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	18d4      	adds	r4, r2, r3
 800275a:	2100      	movs	r1, #0
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f7ff fece 	bl	80024fe <LoRa_read>
 8002762:	4603      	mov	r3, r0
 8002764:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	3301      	adds	r3, #1
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	7ffb      	ldrb	r3, [r7, #31]
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	429a      	cmp	r2, r3
 8002772:	dbef      	blt.n	8002754 <LoRa_receive+0x7e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8002774:	2105      	movs	r1, #5
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f7ff fd18 	bl	80021ac <LoRa_gotoMode>
    return min;
 800277c:	7ffb      	ldrb	r3, [r7, #31]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3724      	adds	r7, #36	; 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd90      	pop	{r4, r7, pc}

08002786 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ff33 	bl	80025fa <LoRa_isvalid>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8093 	beq.w	80028c2 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 800279c:	2100      	movs	r1, #0
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff fd04 	bl	80021ac <LoRa_gotoMode>
			HAL_Delay(10);
 80027a4:	200a      	movs	r0, #10
 80027a6:	f7fe f871 	bl	800088c <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80027aa:	2101      	movs	r1, #1
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff fea6 	bl	80024fe <LoRa_read>
 80027b2:	4603      	mov	r3, r0
 80027b4:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80027b6:	200a      	movs	r0, #10
 80027b8:	f7fe f868 	bl	800088c <HAL_Delay>
			data = read | 0x80;
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027c2:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80027c4:	7bbb      	ldrb	r3, [r7, #14]
 80027c6:	461a      	mov	r2, r3
 80027c8:	2101      	movs	r1, #1
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff feb1 	bl	8002532 <LoRa_write>
			HAL_Delay(100);
 80027d0:	2064      	movs	r0, #100	; 0x64
 80027d2:	f7fe f85b 	bl	800088c <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	4619      	mov	r1, r3
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff fdc2 	bl	8002366 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80027e8:	4619      	mov	r1, r3
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff fe1a 	bl	8002424 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80027f6:	4619      	mov	r1, r3
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff fe27 	bl	800244c <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80027fe:	2223      	movs	r2, #35	; 0x23
 8002800:	210c      	movs	r1, #12
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff fe95 	bl	8002532 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff fe5d 	bl	80024c8 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002814:	4619      	mov	r1, r3
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff fdd5 	bl	80023c6 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 800281c:	22ff      	movs	r2, #255	; 0xff
 800281e:	211f      	movs	r1, #31
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff fe86 	bl	8002532 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	b2da      	uxtb	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	4413      	add	r3, r2
 8002840:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8002842:	7bbb      	ldrb	r3, [r7, #14]
 8002844:	461a      	mov	r2, r3
 8002846:	211d      	movs	r1, #29
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff fe72 	bl	8002532 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002852:	0a1b      	lsrs	r3, r3, #8
 8002854:	b29b      	uxth	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	461a      	mov	r2, r3
 800285a:	2120      	movs	r1, #32
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff fe68 	bl	8002532 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002866:	b2db      	uxtb	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	2121      	movs	r1, #33	; 0x21
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff fe60 	bl	8002532 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8002872:	2140      	movs	r1, #64	; 0x40
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff fe42 	bl	80024fe <LoRa_read>
 800287a:	4603      	mov	r3, r0
 800287c:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8002884:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8002886:	7bbb      	ldrb	r3, [r7, #14]
 8002888:	461a      	mov	r2, r3
 800288a:	2140      	movs	r1, #64	; 0x40
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff fe50 	bl	8002532 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8002892:	2101      	movs	r1, #1
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff fc89 	bl	80021ac <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80028a0:	200a      	movs	r0, #10
 80028a2:	f7fd fff3 	bl	800088c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80028a6:	2142      	movs	r1, #66	; 0x42
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff fe28 	bl	80024fe <LoRa_read>
 80028ae:	4603      	mov	r3, r0
 80028b0:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	2b12      	cmp	r3, #18
 80028b6:	d101      	bne.n	80028bc <LoRa_init+0x136>
				return LORA_OK;
 80028b8:	23c8      	movs	r3, #200	; 0xc8
 80028ba:	e004      	b.n	80028c6 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 80028bc:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80028c0:	e001      	b.n	80028c6 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 80028c2:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <atoi>:
 80028ce:	220a      	movs	r2, #10
 80028d0:	2100      	movs	r1, #0
 80028d2:	f000 b9cf 	b.w	8002c74 <strtol>
	...

080028d8 <calloc>:
 80028d8:	4b02      	ldr	r3, [pc, #8]	; (80028e4 <calloc+0xc>)
 80028da:	460a      	mov	r2, r1
 80028dc:	4601      	mov	r1, r0
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	f000 b844 	b.w	800296c <_calloc_r>
 80028e4:	2000000c 	.word	0x2000000c

080028e8 <__errno>:
 80028e8:	4b01      	ldr	r3, [pc, #4]	; (80028f0 <__errno+0x8>)
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	2000000c 	.word	0x2000000c

080028f4 <__libc_init_array>:
 80028f4:	b570      	push	{r4, r5, r6, lr}
 80028f6:	2600      	movs	r6, #0
 80028f8:	4d0c      	ldr	r5, [pc, #48]	; (800292c <__libc_init_array+0x38>)
 80028fa:	4c0d      	ldr	r4, [pc, #52]	; (8002930 <__libc_init_array+0x3c>)
 80028fc:	1b64      	subs	r4, r4, r5
 80028fe:	10a4      	asrs	r4, r4, #2
 8002900:	42a6      	cmp	r6, r4
 8002902:	d109      	bne.n	8002918 <__libc_init_array+0x24>
 8002904:	f000 fa14 	bl	8002d30 <_init>
 8002908:	2600      	movs	r6, #0
 800290a:	4d0a      	ldr	r5, [pc, #40]	; (8002934 <__libc_init_array+0x40>)
 800290c:	4c0a      	ldr	r4, [pc, #40]	; (8002938 <__libc_init_array+0x44>)
 800290e:	1b64      	subs	r4, r4, r5
 8002910:	10a4      	asrs	r4, r4, #2
 8002912:	42a6      	cmp	r6, r4
 8002914:	d105      	bne.n	8002922 <__libc_init_array+0x2e>
 8002916:	bd70      	pop	{r4, r5, r6, pc}
 8002918:	f855 3b04 	ldr.w	r3, [r5], #4
 800291c:	4798      	blx	r3
 800291e:	3601      	adds	r6, #1
 8002920:	e7ee      	b.n	8002900 <__libc_init_array+0xc>
 8002922:	f855 3b04 	ldr.w	r3, [r5], #4
 8002926:	4798      	blx	r3
 8002928:	3601      	adds	r6, #1
 800292a:	e7f2      	b.n	8002912 <__libc_init_array+0x1e>
 800292c:	08002e6c 	.word	0x08002e6c
 8002930:	08002e6c 	.word	0x08002e6c
 8002934:	08002e6c 	.word	0x08002e6c
 8002938:	08002e70 	.word	0x08002e70

0800293c <malloc>:
 800293c:	4b02      	ldr	r3, [pc, #8]	; (8002948 <malloc+0xc>)
 800293e:	4601      	mov	r1, r0
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	f000 b88f 	b.w	8002a64 <_malloc_r>
 8002946:	bf00      	nop
 8002948:	2000000c 	.word	0x2000000c

0800294c <free>:
 800294c:	4b02      	ldr	r3, [pc, #8]	; (8002958 <free+0xc>)
 800294e:	4601      	mov	r1, r0
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	f000 b81f 	b.w	8002994 <_free_r>
 8002956:	bf00      	nop
 8002958:	2000000c 	.word	0x2000000c

0800295c <memset>:
 800295c:	4603      	mov	r3, r0
 800295e:	4402      	add	r2, r0
 8002960:	4293      	cmp	r3, r2
 8002962:	d100      	bne.n	8002966 <memset+0xa>
 8002964:	4770      	bx	lr
 8002966:	f803 1b01 	strb.w	r1, [r3], #1
 800296a:	e7f9      	b.n	8002960 <memset+0x4>

0800296c <_calloc_r>:
 800296c:	b570      	push	{r4, r5, r6, lr}
 800296e:	fba1 5402 	umull	r5, r4, r1, r2
 8002972:	b934      	cbnz	r4, 8002982 <_calloc_r+0x16>
 8002974:	4629      	mov	r1, r5
 8002976:	f000 f875 	bl	8002a64 <_malloc_r>
 800297a:	4606      	mov	r6, r0
 800297c:	b928      	cbnz	r0, 800298a <_calloc_r+0x1e>
 800297e:	4630      	mov	r0, r6
 8002980:	bd70      	pop	{r4, r5, r6, pc}
 8002982:	220c      	movs	r2, #12
 8002984:	2600      	movs	r6, #0
 8002986:	6002      	str	r2, [r0, #0]
 8002988:	e7f9      	b.n	800297e <_calloc_r+0x12>
 800298a:	462a      	mov	r2, r5
 800298c:	4621      	mov	r1, r4
 800298e:	f7ff ffe5 	bl	800295c <memset>
 8002992:	e7f4      	b.n	800297e <_calloc_r+0x12>

08002994 <_free_r>:
 8002994:	b538      	push	{r3, r4, r5, lr}
 8002996:	4605      	mov	r5, r0
 8002998:	2900      	cmp	r1, #0
 800299a:	d040      	beq.n	8002a1e <_free_r+0x8a>
 800299c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029a0:	1f0c      	subs	r4, r1, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	bfb8      	it	lt
 80029a6:	18e4      	addlt	r4, r4, r3
 80029a8:	f000 f96e 	bl	8002c88 <__malloc_lock>
 80029ac:	4a1c      	ldr	r2, [pc, #112]	; (8002a20 <_free_r+0x8c>)
 80029ae:	6813      	ldr	r3, [r2, #0]
 80029b0:	b933      	cbnz	r3, 80029c0 <_free_r+0x2c>
 80029b2:	6063      	str	r3, [r4, #4]
 80029b4:	6014      	str	r4, [r2, #0]
 80029b6:	4628      	mov	r0, r5
 80029b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029bc:	f000 b96a 	b.w	8002c94 <__malloc_unlock>
 80029c0:	42a3      	cmp	r3, r4
 80029c2:	d908      	bls.n	80029d6 <_free_r+0x42>
 80029c4:	6820      	ldr	r0, [r4, #0]
 80029c6:	1821      	adds	r1, r4, r0
 80029c8:	428b      	cmp	r3, r1
 80029ca:	bf01      	itttt	eq
 80029cc:	6819      	ldreq	r1, [r3, #0]
 80029ce:	685b      	ldreq	r3, [r3, #4]
 80029d0:	1809      	addeq	r1, r1, r0
 80029d2:	6021      	streq	r1, [r4, #0]
 80029d4:	e7ed      	b.n	80029b2 <_free_r+0x1e>
 80029d6:	461a      	mov	r2, r3
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	b10b      	cbz	r3, 80029e0 <_free_r+0x4c>
 80029dc:	42a3      	cmp	r3, r4
 80029de:	d9fa      	bls.n	80029d6 <_free_r+0x42>
 80029e0:	6811      	ldr	r1, [r2, #0]
 80029e2:	1850      	adds	r0, r2, r1
 80029e4:	42a0      	cmp	r0, r4
 80029e6:	d10b      	bne.n	8002a00 <_free_r+0x6c>
 80029e8:	6820      	ldr	r0, [r4, #0]
 80029ea:	4401      	add	r1, r0
 80029ec:	1850      	adds	r0, r2, r1
 80029ee:	4283      	cmp	r3, r0
 80029f0:	6011      	str	r1, [r2, #0]
 80029f2:	d1e0      	bne.n	80029b6 <_free_r+0x22>
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4401      	add	r1, r0
 80029fa:	6011      	str	r1, [r2, #0]
 80029fc:	6053      	str	r3, [r2, #4]
 80029fe:	e7da      	b.n	80029b6 <_free_r+0x22>
 8002a00:	d902      	bls.n	8002a08 <_free_r+0x74>
 8002a02:	230c      	movs	r3, #12
 8002a04:	602b      	str	r3, [r5, #0]
 8002a06:	e7d6      	b.n	80029b6 <_free_r+0x22>
 8002a08:	6820      	ldr	r0, [r4, #0]
 8002a0a:	1821      	adds	r1, r4, r0
 8002a0c:	428b      	cmp	r3, r1
 8002a0e:	bf01      	itttt	eq
 8002a10:	6819      	ldreq	r1, [r3, #0]
 8002a12:	685b      	ldreq	r3, [r3, #4]
 8002a14:	1809      	addeq	r1, r1, r0
 8002a16:	6021      	streq	r1, [r4, #0]
 8002a18:	6063      	str	r3, [r4, #4]
 8002a1a:	6054      	str	r4, [r2, #4]
 8002a1c:	e7cb      	b.n	80029b6 <_free_r+0x22>
 8002a1e:	bd38      	pop	{r3, r4, r5, pc}
 8002a20:	20000130 	.word	0x20000130

08002a24 <sbrk_aligned>:
 8002a24:	b570      	push	{r4, r5, r6, lr}
 8002a26:	4e0e      	ldr	r6, [pc, #56]	; (8002a60 <sbrk_aligned+0x3c>)
 8002a28:	460c      	mov	r4, r1
 8002a2a:	6831      	ldr	r1, [r6, #0]
 8002a2c:	4605      	mov	r5, r0
 8002a2e:	b911      	cbnz	r1, 8002a36 <sbrk_aligned+0x12>
 8002a30:	f000 f894 	bl	8002b5c <_sbrk_r>
 8002a34:	6030      	str	r0, [r6, #0]
 8002a36:	4621      	mov	r1, r4
 8002a38:	4628      	mov	r0, r5
 8002a3a:	f000 f88f 	bl	8002b5c <_sbrk_r>
 8002a3e:	1c43      	adds	r3, r0, #1
 8002a40:	d00a      	beq.n	8002a58 <sbrk_aligned+0x34>
 8002a42:	1cc4      	adds	r4, r0, #3
 8002a44:	f024 0403 	bic.w	r4, r4, #3
 8002a48:	42a0      	cmp	r0, r4
 8002a4a:	d007      	beq.n	8002a5c <sbrk_aligned+0x38>
 8002a4c:	1a21      	subs	r1, r4, r0
 8002a4e:	4628      	mov	r0, r5
 8002a50:	f000 f884 	bl	8002b5c <_sbrk_r>
 8002a54:	3001      	adds	r0, #1
 8002a56:	d101      	bne.n	8002a5c <sbrk_aligned+0x38>
 8002a58:	f04f 34ff 	mov.w	r4, #4294967295
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	bd70      	pop	{r4, r5, r6, pc}
 8002a60:	20000134 	.word	0x20000134

08002a64 <_malloc_r>:
 8002a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a68:	1ccd      	adds	r5, r1, #3
 8002a6a:	f025 0503 	bic.w	r5, r5, #3
 8002a6e:	3508      	adds	r5, #8
 8002a70:	2d0c      	cmp	r5, #12
 8002a72:	bf38      	it	cc
 8002a74:	250c      	movcc	r5, #12
 8002a76:	2d00      	cmp	r5, #0
 8002a78:	4607      	mov	r7, r0
 8002a7a:	db01      	blt.n	8002a80 <_malloc_r+0x1c>
 8002a7c:	42a9      	cmp	r1, r5
 8002a7e:	d905      	bls.n	8002a8c <_malloc_r+0x28>
 8002a80:	230c      	movs	r3, #12
 8002a82:	2600      	movs	r6, #0
 8002a84:	603b      	str	r3, [r7, #0]
 8002a86:	4630      	mov	r0, r6
 8002a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a8c:	4e2e      	ldr	r6, [pc, #184]	; (8002b48 <_malloc_r+0xe4>)
 8002a8e:	f000 f8fb 	bl	8002c88 <__malloc_lock>
 8002a92:	6833      	ldr	r3, [r6, #0]
 8002a94:	461c      	mov	r4, r3
 8002a96:	bb34      	cbnz	r4, 8002ae6 <_malloc_r+0x82>
 8002a98:	4629      	mov	r1, r5
 8002a9a:	4638      	mov	r0, r7
 8002a9c:	f7ff ffc2 	bl	8002a24 <sbrk_aligned>
 8002aa0:	1c43      	adds	r3, r0, #1
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	d14d      	bne.n	8002b42 <_malloc_r+0xde>
 8002aa6:	6834      	ldr	r4, [r6, #0]
 8002aa8:	4626      	mov	r6, r4
 8002aaa:	2e00      	cmp	r6, #0
 8002aac:	d140      	bne.n	8002b30 <_malloc_r+0xcc>
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	4631      	mov	r1, r6
 8002ab2:	4638      	mov	r0, r7
 8002ab4:	eb04 0803 	add.w	r8, r4, r3
 8002ab8:	f000 f850 	bl	8002b5c <_sbrk_r>
 8002abc:	4580      	cmp	r8, r0
 8002abe:	d13a      	bne.n	8002b36 <_malloc_r+0xd2>
 8002ac0:	6821      	ldr	r1, [r4, #0]
 8002ac2:	3503      	adds	r5, #3
 8002ac4:	1a6d      	subs	r5, r5, r1
 8002ac6:	f025 0503 	bic.w	r5, r5, #3
 8002aca:	3508      	adds	r5, #8
 8002acc:	2d0c      	cmp	r5, #12
 8002ace:	bf38      	it	cc
 8002ad0:	250c      	movcc	r5, #12
 8002ad2:	4638      	mov	r0, r7
 8002ad4:	4629      	mov	r1, r5
 8002ad6:	f7ff ffa5 	bl	8002a24 <sbrk_aligned>
 8002ada:	3001      	adds	r0, #1
 8002adc:	d02b      	beq.n	8002b36 <_malloc_r+0xd2>
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	442b      	add	r3, r5
 8002ae2:	6023      	str	r3, [r4, #0]
 8002ae4:	e00e      	b.n	8002b04 <_malloc_r+0xa0>
 8002ae6:	6822      	ldr	r2, [r4, #0]
 8002ae8:	1b52      	subs	r2, r2, r5
 8002aea:	d41e      	bmi.n	8002b2a <_malloc_r+0xc6>
 8002aec:	2a0b      	cmp	r2, #11
 8002aee:	d916      	bls.n	8002b1e <_malloc_r+0xba>
 8002af0:	1961      	adds	r1, r4, r5
 8002af2:	42a3      	cmp	r3, r4
 8002af4:	6025      	str	r5, [r4, #0]
 8002af6:	bf18      	it	ne
 8002af8:	6059      	strne	r1, [r3, #4]
 8002afa:	6863      	ldr	r3, [r4, #4]
 8002afc:	bf08      	it	eq
 8002afe:	6031      	streq	r1, [r6, #0]
 8002b00:	5162      	str	r2, [r4, r5]
 8002b02:	604b      	str	r3, [r1, #4]
 8002b04:	4638      	mov	r0, r7
 8002b06:	f104 060b 	add.w	r6, r4, #11
 8002b0a:	f000 f8c3 	bl	8002c94 <__malloc_unlock>
 8002b0e:	f026 0607 	bic.w	r6, r6, #7
 8002b12:	1d23      	adds	r3, r4, #4
 8002b14:	1af2      	subs	r2, r6, r3
 8002b16:	d0b6      	beq.n	8002a86 <_malloc_r+0x22>
 8002b18:	1b9b      	subs	r3, r3, r6
 8002b1a:	50a3      	str	r3, [r4, r2]
 8002b1c:	e7b3      	b.n	8002a86 <_malloc_r+0x22>
 8002b1e:	6862      	ldr	r2, [r4, #4]
 8002b20:	42a3      	cmp	r3, r4
 8002b22:	bf0c      	ite	eq
 8002b24:	6032      	streq	r2, [r6, #0]
 8002b26:	605a      	strne	r2, [r3, #4]
 8002b28:	e7ec      	b.n	8002b04 <_malloc_r+0xa0>
 8002b2a:	4623      	mov	r3, r4
 8002b2c:	6864      	ldr	r4, [r4, #4]
 8002b2e:	e7b2      	b.n	8002a96 <_malloc_r+0x32>
 8002b30:	4634      	mov	r4, r6
 8002b32:	6876      	ldr	r6, [r6, #4]
 8002b34:	e7b9      	b.n	8002aaa <_malloc_r+0x46>
 8002b36:	230c      	movs	r3, #12
 8002b38:	4638      	mov	r0, r7
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	f000 f8aa 	bl	8002c94 <__malloc_unlock>
 8002b40:	e7a1      	b.n	8002a86 <_malloc_r+0x22>
 8002b42:	6025      	str	r5, [r4, #0]
 8002b44:	e7de      	b.n	8002b04 <_malloc_r+0xa0>
 8002b46:	bf00      	nop
 8002b48:	20000130 	.word	0x20000130

08002b4c <realloc>:
 8002b4c:	4b02      	ldr	r3, [pc, #8]	; (8002b58 <realloc+0xc>)
 8002b4e:	460a      	mov	r2, r1
 8002b50:	4601      	mov	r1, r0
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	f000 b8a4 	b.w	8002ca0 <_realloc_r>
 8002b58:	2000000c 	.word	0x2000000c

08002b5c <_sbrk_r>:
 8002b5c:	b538      	push	{r3, r4, r5, lr}
 8002b5e:	2300      	movs	r3, #0
 8002b60:	4d05      	ldr	r5, [pc, #20]	; (8002b78 <_sbrk_r+0x1c>)
 8002b62:	4604      	mov	r4, r0
 8002b64:	4608      	mov	r0, r1
 8002b66:	602b      	str	r3, [r5, #0]
 8002b68:	f7fd fdcc 	bl	8000704 <_sbrk>
 8002b6c:	1c43      	adds	r3, r0, #1
 8002b6e:	d102      	bne.n	8002b76 <_sbrk_r+0x1a>
 8002b70:	682b      	ldr	r3, [r5, #0]
 8002b72:	b103      	cbz	r3, 8002b76 <_sbrk_r+0x1a>
 8002b74:	6023      	str	r3, [r4, #0]
 8002b76:	bd38      	pop	{r3, r4, r5, pc}
 8002b78:	20000138 	.word	0x20000138

08002b7c <_strtol_l.constprop.0>:
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b82:	4680      	mov	r8, r0
 8002b84:	d001      	beq.n	8002b8a <_strtol_l.constprop.0+0xe>
 8002b86:	2b24      	cmp	r3, #36	; 0x24
 8002b88:	d906      	bls.n	8002b98 <_strtol_l.constprop.0+0x1c>
 8002b8a:	f7ff fead 	bl	80028e8 <__errno>
 8002b8e:	2316      	movs	r3, #22
 8002b90:	6003      	str	r3, [r0, #0]
 8002b92:	2000      	movs	r0, #0
 8002b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b98:	460d      	mov	r5, r1
 8002b9a:	4f35      	ldr	r7, [pc, #212]	; (8002c70 <_strtol_l.constprop.0+0xf4>)
 8002b9c:	4628      	mov	r0, r5
 8002b9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002ba2:	5de6      	ldrb	r6, [r4, r7]
 8002ba4:	f016 0608 	ands.w	r6, r6, #8
 8002ba8:	d1f8      	bne.n	8002b9c <_strtol_l.constprop.0+0x20>
 8002baa:	2c2d      	cmp	r4, #45	; 0x2d
 8002bac:	d12f      	bne.n	8002c0e <_strtol_l.constprop.0+0x92>
 8002bae:	2601      	movs	r6, #1
 8002bb0:	782c      	ldrb	r4, [r5, #0]
 8002bb2:	1c85      	adds	r5, r0, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d057      	beq.n	8002c68 <_strtol_l.constprop.0+0xec>
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d109      	bne.n	8002bd0 <_strtol_l.constprop.0+0x54>
 8002bbc:	2c30      	cmp	r4, #48	; 0x30
 8002bbe:	d107      	bne.n	8002bd0 <_strtol_l.constprop.0+0x54>
 8002bc0:	7828      	ldrb	r0, [r5, #0]
 8002bc2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002bc6:	2858      	cmp	r0, #88	; 0x58
 8002bc8:	d149      	bne.n	8002c5e <_strtol_l.constprop.0+0xe2>
 8002bca:	2310      	movs	r3, #16
 8002bcc:	786c      	ldrb	r4, [r5, #1]
 8002bce:	3502      	adds	r5, #2
 8002bd0:	2700      	movs	r7, #0
 8002bd2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8002bd6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8002bda:	fbbe f9f3 	udiv	r9, lr, r3
 8002bde:	4638      	mov	r0, r7
 8002be0:	fb03 ea19 	mls	sl, r3, r9, lr
 8002be4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8002be8:	f1bc 0f09 	cmp.w	ip, #9
 8002bec:	d814      	bhi.n	8002c18 <_strtol_l.constprop.0+0x9c>
 8002bee:	4664      	mov	r4, ip
 8002bf0:	42a3      	cmp	r3, r4
 8002bf2:	dd22      	ble.n	8002c3a <_strtol_l.constprop.0+0xbe>
 8002bf4:	2f00      	cmp	r7, #0
 8002bf6:	db1d      	blt.n	8002c34 <_strtol_l.constprop.0+0xb8>
 8002bf8:	4581      	cmp	r9, r0
 8002bfa:	d31b      	bcc.n	8002c34 <_strtol_l.constprop.0+0xb8>
 8002bfc:	d101      	bne.n	8002c02 <_strtol_l.constprop.0+0x86>
 8002bfe:	45a2      	cmp	sl, r4
 8002c00:	db18      	blt.n	8002c34 <_strtol_l.constprop.0+0xb8>
 8002c02:	2701      	movs	r7, #1
 8002c04:	fb00 4003 	mla	r0, r0, r3, r4
 8002c08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002c0c:	e7ea      	b.n	8002be4 <_strtol_l.constprop.0+0x68>
 8002c0e:	2c2b      	cmp	r4, #43	; 0x2b
 8002c10:	bf04      	itt	eq
 8002c12:	782c      	ldrbeq	r4, [r5, #0]
 8002c14:	1c85      	addeq	r5, r0, #2
 8002c16:	e7cd      	b.n	8002bb4 <_strtol_l.constprop.0+0x38>
 8002c18:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8002c1c:	f1bc 0f19 	cmp.w	ip, #25
 8002c20:	d801      	bhi.n	8002c26 <_strtol_l.constprop.0+0xaa>
 8002c22:	3c37      	subs	r4, #55	; 0x37
 8002c24:	e7e4      	b.n	8002bf0 <_strtol_l.constprop.0+0x74>
 8002c26:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8002c2a:	f1bc 0f19 	cmp.w	ip, #25
 8002c2e:	d804      	bhi.n	8002c3a <_strtol_l.constprop.0+0xbe>
 8002c30:	3c57      	subs	r4, #87	; 0x57
 8002c32:	e7dd      	b.n	8002bf0 <_strtol_l.constprop.0+0x74>
 8002c34:	f04f 37ff 	mov.w	r7, #4294967295
 8002c38:	e7e6      	b.n	8002c08 <_strtol_l.constprop.0+0x8c>
 8002c3a:	2f00      	cmp	r7, #0
 8002c3c:	da07      	bge.n	8002c4e <_strtol_l.constprop.0+0xd2>
 8002c3e:	2322      	movs	r3, #34	; 0x22
 8002c40:	4670      	mov	r0, lr
 8002c42:	f8c8 3000 	str.w	r3, [r8]
 8002c46:	2a00      	cmp	r2, #0
 8002c48:	d0a4      	beq.n	8002b94 <_strtol_l.constprop.0+0x18>
 8002c4a:	1e69      	subs	r1, r5, #1
 8002c4c:	e005      	b.n	8002c5a <_strtol_l.constprop.0+0xde>
 8002c4e:	b106      	cbz	r6, 8002c52 <_strtol_l.constprop.0+0xd6>
 8002c50:	4240      	negs	r0, r0
 8002c52:	2a00      	cmp	r2, #0
 8002c54:	d09e      	beq.n	8002b94 <_strtol_l.constprop.0+0x18>
 8002c56:	2f00      	cmp	r7, #0
 8002c58:	d1f7      	bne.n	8002c4a <_strtol_l.constprop.0+0xce>
 8002c5a:	6011      	str	r1, [r2, #0]
 8002c5c:	e79a      	b.n	8002b94 <_strtol_l.constprop.0+0x18>
 8002c5e:	2430      	movs	r4, #48	; 0x30
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1b5      	bne.n	8002bd0 <_strtol_l.constprop.0+0x54>
 8002c64:	2308      	movs	r3, #8
 8002c66:	e7b3      	b.n	8002bd0 <_strtol_l.constprop.0+0x54>
 8002c68:	2c30      	cmp	r4, #48	; 0x30
 8002c6a:	d0a9      	beq.n	8002bc0 <_strtol_l.constprop.0+0x44>
 8002c6c:	230a      	movs	r3, #10
 8002c6e:	e7af      	b.n	8002bd0 <_strtol_l.constprop.0+0x54>
 8002c70:	08002d6b 	.word	0x08002d6b

08002c74 <strtol>:
 8002c74:	4613      	mov	r3, r2
 8002c76:	460a      	mov	r2, r1
 8002c78:	4601      	mov	r1, r0
 8002c7a:	4802      	ldr	r0, [pc, #8]	; (8002c84 <strtol+0x10>)
 8002c7c:	6800      	ldr	r0, [r0, #0]
 8002c7e:	f7ff bf7d 	b.w	8002b7c <_strtol_l.constprop.0>
 8002c82:	bf00      	nop
 8002c84:	2000000c 	.word	0x2000000c

08002c88 <__malloc_lock>:
 8002c88:	4801      	ldr	r0, [pc, #4]	; (8002c90 <__malloc_lock+0x8>)
 8002c8a:	f000 b838 	b.w	8002cfe <__retarget_lock_acquire_recursive>
 8002c8e:	bf00      	nop
 8002c90:	2000013c 	.word	0x2000013c

08002c94 <__malloc_unlock>:
 8002c94:	4801      	ldr	r0, [pc, #4]	; (8002c9c <__malloc_unlock+0x8>)
 8002c96:	f000 b833 	b.w	8002d00 <__retarget_lock_release_recursive>
 8002c9a:	bf00      	nop
 8002c9c:	2000013c 	.word	0x2000013c

08002ca0 <_realloc_r>:
 8002ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ca4:	4680      	mov	r8, r0
 8002ca6:	4614      	mov	r4, r2
 8002ca8:	460e      	mov	r6, r1
 8002caa:	b921      	cbnz	r1, 8002cb6 <_realloc_r+0x16>
 8002cac:	4611      	mov	r1, r2
 8002cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002cb2:	f7ff bed7 	b.w	8002a64 <_malloc_r>
 8002cb6:	b92a      	cbnz	r2, 8002cc4 <_realloc_r+0x24>
 8002cb8:	f7ff fe6c 	bl	8002994 <_free_r>
 8002cbc:	4625      	mov	r5, r4
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cc4:	f000 f82b 	bl	8002d1e <_malloc_usable_size_r>
 8002cc8:	4284      	cmp	r4, r0
 8002cca:	4607      	mov	r7, r0
 8002ccc:	d802      	bhi.n	8002cd4 <_realloc_r+0x34>
 8002cce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002cd2:	d812      	bhi.n	8002cfa <_realloc_r+0x5a>
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	4640      	mov	r0, r8
 8002cd8:	f7ff fec4 	bl	8002a64 <_malloc_r>
 8002cdc:	4605      	mov	r5, r0
 8002cde:	2800      	cmp	r0, #0
 8002ce0:	d0ed      	beq.n	8002cbe <_realloc_r+0x1e>
 8002ce2:	42bc      	cmp	r4, r7
 8002ce4:	4622      	mov	r2, r4
 8002ce6:	4631      	mov	r1, r6
 8002ce8:	bf28      	it	cs
 8002cea:	463a      	movcs	r2, r7
 8002cec:	f000 f809 	bl	8002d02 <memcpy>
 8002cf0:	4631      	mov	r1, r6
 8002cf2:	4640      	mov	r0, r8
 8002cf4:	f7ff fe4e 	bl	8002994 <_free_r>
 8002cf8:	e7e1      	b.n	8002cbe <_realloc_r+0x1e>
 8002cfa:	4635      	mov	r5, r6
 8002cfc:	e7df      	b.n	8002cbe <_realloc_r+0x1e>

08002cfe <__retarget_lock_acquire_recursive>:
 8002cfe:	4770      	bx	lr

08002d00 <__retarget_lock_release_recursive>:
 8002d00:	4770      	bx	lr

08002d02 <memcpy>:
 8002d02:	440a      	add	r2, r1
 8002d04:	4291      	cmp	r1, r2
 8002d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d0a:	d100      	bne.n	8002d0e <memcpy+0xc>
 8002d0c:	4770      	bx	lr
 8002d0e:	b510      	push	{r4, lr}
 8002d10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d14:	4291      	cmp	r1, r2
 8002d16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d1a:	d1f9      	bne.n	8002d10 <memcpy+0xe>
 8002d1c:	bd10      	pop	{r4, pc}

08002d1e <_malloc_usable_size_r>:
 8002d1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d22:	1f18      	subs	r0, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bfbc      	itt	lt
 8002d28:	580b      	ldrlt	r3, [r1, r0]
 8002d2a:	18c0      	addlt	r0, r0, r3
 8002d2c:	4770      	bx	lr
	...

08002d30 <_init>:
 8002d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d32:	bf00      	nop
 8002d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d36:	bc08      	pop	{r3}
 8002d38:	469e      	mov	lr, r3
 8002d3a:	4770      	bx	lr

08002d3c <_fini>:
 8002d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3e:	bf00      	nop
 8002d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d42:	bc08      	pop	{r3}
 8002d44:	469e      	mov	lr, r3
 8002d46:	4770      	bx	lr
